<!DOCTYPE html>
<html lang="en"> <head><meta charset="utf-8"><title>glGet - OpenGL 2 - docs.gl</title><link rel="shortcut icon" href="/favicon.ico"><script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script><link rel="stylesheet" href="../jquery-ui.css"><script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/jquery-ui.min.js"></script><script src="../jquery-bonsai/jquery.bonsai.js"></script><link href="../jquery-bonsai/jquery.bonsai.css" rel="stylesheet" type="text/css"><script src="../jquery-cookie/jquery.cookie.js"></script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=MML_HTMLorMML"></script><link href="../style.css" rel="stylesheet" type="text/css"><link id="pagestyle" href="../style_light.css" rel="stylesheet" type="text/css"><script>
    window.current_api = "gl21";
    window.base_directory = "../";
  </script><script src="../docs.gl.search.js"></script><script src="../docs.gl.js"></script></head> <body> <div class="header-bg"> <div class="toggle-container"><a href="#" id="style_light">Light</a> | <a href="#" id="style_dark">Dark</a></div> <div class="header-container"> <div class="header-inner"> <a href="/"><h1 class="header-logo">docs.<span class="thicken">GL</span></h1></a> <input id="search" placeholder="search" size="50"><input id="search_button" type="submit" value="Go"> <span style="clear:both;"></span> </div> </div> </div> <div id="everything"> <div id="toc"> <div id="versions_container"> <select id="versions_dropdown"><option class="versions_option" value="gl21" selected>OpenGL 2.1</option><option class="versions_option" value="gl30">OpenGL 3.0</option><option class="versions_option" value="gl31">OpenGL 3.1</option><option class="versions_option" value="gl32">OpenGL 3.2</option><option class="versions_option" value="gl33">OpenGL 3.3</option><option class="versions_option" value="gl40">OpenGL 4.0</option><option class="versions_option" value="gl41">OpenGL 4.1</option><option class="versions_option" value="gl42">OpenGL 4.2</option><option class="versions_option" value="gl43">OpenGL 4.3</option><option class="versions_option" value="gl44">OpenGL 4.4</option><option class="versions_option" value="gl45">OpenGL 4.5</option><option class="versions_option" value="es20">OpenGL ES 2.0</option><option class="versions_option" value="es30">OpenGL ES 3.0</option><option class="versions_option" value="es31">OpenGL ES 3.1</option><option class="versions_option" value="sl40">GLSL 4.0</option><option class="versions_option" value="sl41">GLSL 4.1</option><option class="versions_option" value="sl42">GLSL 4.2</option><option class="versions_option" value="sl43">GLSL 4.3</option><option class="versions_option" value="sl44">GLSL 4.4</option><option class="versions_option" value="sl45">GLSL 4.5</option><option class="versions_option" value="el30">GLSL ES 3.0</option><option class="versions_option" value="el31">GLSL ES 3.1</option></select> </div> <input id="hide_deprecated" type="checkbox"> <label id="hide_label" for="hide_deprecated">Hide unavailable</label> <ul id="command_categories"><li class="category es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Textures<ul><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glActiveTexture</a></li><li><a class="rewritelink command es31 gl42 gl43 gl44 gl45">glBindImageTexture</a></li><li><a class="rewritelink command gl44 gl45">glBindImageTextures</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindTexture</a></li><li><a class="rewritelink command gl45">glBindTextureUnit</a></li><li><a class="rewritelink command gl44 gl45">glBindTextures</a></li><li><a class="rewritelink command gl44 gl45">glClearTexImage</a></li><li><a class="rewritelink command gl44 gl45">glClearTexSubImage</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompressedTexImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompressedTexImage2D</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompressedTexImage3D</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompressedTexSubImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompressedTexSubImage2D</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glCompressedTexSubImage3D</a></li><li><a class="rewritelink command gl43 gl44 gl45">glCopyImageSubData</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCopyTexImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCopyTexImage2D</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glCopyTexSubImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glCopyTexSubImage2D</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCopyTexSubImage3D</a></li><li><a class="rewritelink command gl45">glCreateTextures</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteTextures</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenTextures</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45 gl45">glGetCompressedTexImage</a></li><li><a class="rewritelink command gl45">glGetCompressedTextureSubImage</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glGetTexImage</a></li><li><a class="rewritelink command es31 es31 gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45 gl45 gl45">glGetTexLevelParameter</a></li><li><a class="rewritelink command es20 es20 es30 es30 es31 es31 gl20 gl20 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glGetTexParameter</a></li><li><a class="rewritelink command gl45">glGetTextureSubImage</a></li><li><a class="rewritelink command gl43 gl44 gl45">glInvalidateTexImage</a></li><li><a class="rewritelink command gl43 gl44 gl45">glInvalidateTexSubImage</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsTexture</a></li><li><a class="rewritelink command gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexBuffer</a></li><li><a class="rewritelink command gl43 gl44 gl45">glTexBufferRange</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexImage2D</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexImage2DMultisample</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexImage3D</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexImage3DMultisample</a></li><li><a class="rewritelink command es20 es20 es20 es20 es30 es30 es30 es30 es31 es31 es31 es31 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glTexParameter</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glTexStorage1D</a></li><li><a class="rewritelink command es30 es31 gl42 gl43 gl44 gl45 gl45">glTexStorage2D</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45 gl45">glTexStorage2DMultisample</a></li><li><a class="rewritelink command es30 es31 gl42 gl43 gl44 gl45 gl45">glTexStorage3D</a></li><li><a class="rewritelink command gl43 gl44 gl45">glTexStorage3DMultisample</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTexSubImage1D</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glTexSubImage2D</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glTexSubImage3D</a></li><li><a class="rewritelink command gl43 gl44 gl45">glTextureView</a></li></ul></li><li class="category es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Rendering<ul><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glClear</a></li><li><a class="rewritelink command es30 es30 es30 es30 es31 es31 es31 es31 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glClearBuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glClearColor</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl41 gl42 gl42 gl43 gl44 gl45">glClearDepth</a></li><li><a class="rewritelink command es20 es30 es31">glClearDepthf</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glClearStencil</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawBuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFinish</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFlush</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glReadBuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glReadPixels</a></li></ul></li><li class="category es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl20 gl21">Frame Buffers<ul><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindFramebuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindRenderbuffer</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBlitFramebuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCheckFramebufferStatus</a></li><li><a class="rewritelink command gl45">glCreateFramebuffers</a></li><li><a class="rewritelink command gl45">glCreateRenderbuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteFramebuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteRenderbuffers</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawBuffers</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45 gl45">glFramebufferParameteri</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glFramebufferRenderbuffer</a></li><li><a class="rewritelink command gl30 gl30 gl30 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl40 gl40 gl40 gl41 gl41 gl41 gl42 gl42 gl42 gl43 gl43 gl43 gl44 gl44 gl44 gl45 gl45 gl45 gl45">glFramebufferTexture</a></li><li><a class="rewritelink command es20 es30 es31">glFramebufferTexture2D</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFramebufferTextureLayer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenFramebuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenRenderbuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glGenerateMipmap</a></li><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glGetFramebufferAttachmentParameter</a></li><li><a class="rewritelink command es20 es30 es31">glGetFramebufferAttachmentParameteriv</a></li><li><a class="rewritelink command gl43 gl44 gl45">glGetFramebufferParameter</a></li><li><a class="rewritelink command es31">glGetFramebufferParameteriv</a></li><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glGetRenderbufferParameter</a></li><li><a class="rewritelink command es20 es30 es31">glGetRenderbufferParameteriv</a></li><li><a class="rewritelink command es30 es31 gl43 gl44 gl45 gl45">glInvalidateFramebuffer</a></li><li><a class="rewritelink command es30 es31 gl43 gl44 gl45">glInvalidateSubFramebuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsFramebuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsRenderbuffer</a></li><li><a class="rewritelink command es20 es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glRenderbufferStorage</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glRenderbufferStorageMultisample</a></li><li><a class="rewritelink command es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glSampleMaski</a></li></ul></li><li class="category es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Shaders<ul><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glAttachShader</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindAttribLocation</a></li><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindFragDataLocation</a></li><li><a class="rewritelink command gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindFragDataLocationIndexed</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCompileShader</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCreateProgram</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCreateShader</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glCreateShaderProgram</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteProgram</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteShader</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDetachShader</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glGetActiveAtomicCounterBufferiv</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveAttrib</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveSubroutineName</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveSubroutineUniform</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveSubroutineUniformName</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveUniform</a></li><li><a class="rewritelink command gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveUniformBlock</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveUniformBlockName</a></li><li><a class="rewritelink command es30 es31">glGetActiveUniformBlockiv</a></li><li><a class="rewritelink command gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveUniformName</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetActiveUniformsiv</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetAttachedShaders</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetAttribLocation</a></li><li><a class="rewritelink command gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetFragDataIndex</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetFragDataLocation</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetProgram</a></li><li><a class="rewritelink command es30 es31 gl41 gl42 gl43 gl44 gl45">glGetProgramBinary</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetProgramInfoLog</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glGetProgramResource</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glGetProgramResourceIndex</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glGetProgramResourceLocation</a></li><li><a class="rewritelink command gl43 gl44 gl45">glGetProgramResourceLocationIndex</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glGetProgramResourceName</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetProgramStage</a></li><li><a class="rewritelink command es20 es30 es31">glGetProgramiv</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetShader</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetShaderInfoLog</a></li><li><a class="rewritelink command es20 es30 es31 gl41 gl42 gl43 gl44 gl45">glGetShaderPrecisionFormat</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetShaderSource</a></li><li><a class="rewritelink command es20 es30 es31">glGetShaderiv</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetSubroutineIndex</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetSubroutineUniformLocation</a></li><li><a class="rewritelink command es20 es20 es30 es30 es30 es31 es31 es31 gl20 gl20 gl21 gl21 gl30 gl30 gl30 gl31 gl31 gl31 gl32 gl32 gl32 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glGetUniform</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetUniformBlockIndex</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetUniformIndices</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetUniformLocation</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetUniformSubroutine</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsProgram</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsShader</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glLinkProgram</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glMinSampleShading</a></li><li><a class="rewritelink command es30 es31 gl41 gl42 gl43 gl44 gl45">glProgramBinary</a></li><li><a class="rewritelink command gl41 gl42 gl43 gl44 gl45">glProgramParameter</a></li><li><a class="rewritelink command es30 es31">glProgramParameteri</a></li><li><a class="rewritelink command es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glProgramUniform</a></li><li><a class="rewritelink command es20 es30 es31 gl41 gl42 gl43 gl44 gl45">glReleaseShaderCompiler</a></li><li><a class="rewritelink command es20 es30 es31 gl41 gl42 gl43 gl44 gl45">glShaderBinary</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glShaderSource</a></li><li><a class="rewritelink command gl43 gl44 gl45">glShaderStorageBlockBinding</a></li><li><a class="rewritelink command es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es20 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glUniform</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glUniformBlockBinding</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glUniformSubroutines</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glUseProgram</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glUseProgramStages</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glValidateProgram</a></li></ul></li><li class="category es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Buffer Objects<ul><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindBuffer</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindBufferBase</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindBufferRange</a></li><li><a class="rewritelink command gl44 gl45">glBindBuffersBase</a></li><li><a class="rewritelink command gl44 gl45">glBindBuffersRange</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glBindVertexBuffer</a></li><li><a class="rewritelink command gl44 gl45">glBindVertexBuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glBufferData</a></li><li><a class="rewritelink command gl44 gl45 gl45">glBufferStorage</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glBufferSubData</a></li><li><a class="rewritelink command gl43 gl44 gl45">glClearBufferData</a></li><li><a class="rewritelink command gl43 gl44 gl45 gl45">glClearBufferSubData</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glCopyBufferSubData</a></li><li><a class="rewritelink command gl45">glCreateBuffers</a></li><li><a class="rewritelink command gl45">glCreateVertexArrays</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteBuffers</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glDisableVertexAttribArray</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawArrays</a></li><li><a class="rewritelink command es31 gl40 gl41 gl42 gl43 gl44 gl45">glDrawArraysIndirect</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawArraysInstanced</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glDrawArraysInstancedBaseInstance</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawElements</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawElementsBaseVertex</a></li><li><a class="rewritelink command es31 gl40 gl41 gl42 gl43 gl44 gl45">glDrawElementsIndirect</a></li><li><a class="rewritelink command es30 es31 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawElementsInstanced</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glDrawElementsInstancedBaseInstance</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawElementsInstancedBaseVertex</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glDrawElementsInstancedBaseVertexBaseInstance</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawRangeElements</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDrawRangeElementsBaseVertex</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glEnableVertexAttribArray</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFlushMappedBufferRange</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenBuffers</a></li><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45 gl45">glGetBufferParameter</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glGetBufferParameteriv</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetBufferPointerv</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetBufferSubData</a></li><li><a class="rewritelink command gl45 gl45">glGetVertexArrayIndexed</a></li><li><a class="rewritelink command gl45">glGetVertexArrayiv</a></li><li><a class="rewritelink command es20 es20 es30 es30 es30 es30 es31 es31 es31 es31 gl20 gl20 gl20 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45">glGetVertexAttrib</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetVertexAttribPointerv</a></li><li><a class="rewritelink command gl43 gl44 gl45">glInvalidateBufferData</a></li><li><a class="rewritelink command gl43 gl44 gl45">glInvalidateBufferSubData</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsBuffer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glMapBuffer</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glMapBufferRange</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glMultiDrawArrays</a></li><li><a class="rewritelink command gl43 gl44 gl45">glMultiDrawArraysIndirect</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glMultiDrawElements</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glMultiDrawElementsBaseVertex</a></li><li><a class="rewritelink command gl43 gl44 gl45">glMultiDrawElementsIndirect</a></li><li><a class="rewritelink command gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glPatchParameter</a></li><li><a class="rewritelink command gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glPrimitiveRestartIndex</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glProvokingVertex</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 gl45">glUnmapBuffer</a></li><li><a class="rewritelink command gl45">glVertexArrayElementBuffer</a></li><li><a class="rewritelink command es20 es20 es20 es20 es20 es20 es20 es20 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es30 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 es31 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glVertexAttrib</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glVertexAttribBinding</a></li><li><a class="rewritelink command es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glVertexAttribDivisor</a></li><li><a class="rewritelink command es31 es31 gl43 gl43 gl43 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45">glVertexAttribFormat</a></li><li><a class="rewritelink command es20 es30 es31 es31 gl20 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glVertexAttribPointer</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45 gl45">glVertexBindingDivisor</a></li></ul></li><li class="category open_me es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">State Management<ul><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBlendColor</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBlendEquation</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBlendEquationSeparate</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glBlendFunc</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glBlendFuncSeparate</a></li><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glClampColor</a></li><li><a class="rewritelink command gl45">glClipControl</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glColorMask</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glCullFace</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDepthFunc</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDepthMask</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDepthRange</a></li><li><a class="rewritelink command gl41 gl42 gl43 gl44 gl45">glDepthRangeArray</a></li><li><a class="rewritelink command gl41 gl42 gl43 gl44 gl45">glDepthRangeIndexed</a></li><li><a class="rewritelink command es20 es30 es31">glDepthRangef</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glDisable</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glEnable</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFrontFace</a></li><li><a class="rewritelink command current es20 es20 es20 es30 es30 es30 es30 es30 es30 es31 es31 es31 es31 es31 es31 es31 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45 gl45">glGet</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetError</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glHint</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl30 gl31 gl31 gl32 gl33 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glIsEnabled</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glLineWidth</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glLogicOp</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glPixelStore</a></li><li><a class="rewritelink command es20 es30 es31">glPixelStorei</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl32 gl32 gl32 gl32 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45">glPointParameter</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glPointSize</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glPolygonMode</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glPolygonOffset</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glSampleCoverage</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glScissor</a></li><li><a class="rewritelink command gl41 gl42 gl43 gl44 gl45">glScissorArray</a></li><li><a class="rewritelink command gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glScissorIndexed</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilFunc</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilFuncSeparate</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilMask</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilMaskSeparate</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilOp</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glStencilOpSeparate</a></li><li><a class="rewritelink command es20 es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glViewport</a></li><li><a class="rewritelink command gl41 gl42 gl43 gl44 gl45">glViewportArray</a></li><li><a class="rewritelink command gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glViewportIndexed</a></li></ul></li><li class="category es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Transform Feedback<ul><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBeginTransformFeedback</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glBindTransformFeedback</a></li><li><a class="rewritelink command gl45">glCreateTransformFeedbacks</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteTransformFeedbacks</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glDrawTransformFeedback</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glDrawTransformFeedbackInstanced</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glDrawTransformFeedbackStream</a></li><li><a class="rewritelink command gl42 gl43 gl44 gl45">glDrawTransformFeedbackStreamInstanced</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glEndTransformFeedback</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glGenTransformFeedbacks</a></li><li><a class="rewritelink command gl45 gl45 gl45">glGetTransformFeedback</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetTransformFeedbackVarying</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glIsTransformFeedback</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glPauseTransformFeedback</a></li><li><a class="rewritelink command es30 es31 gl40 gl41 gl42 gl43 gl44 gl45">glResumeTransformFeedback</a></li><li><a class="rewritelink command gl45">glTransformFeedbackBufferBase</a></li><li><a class="rewritelink command gl45">glTransformFeedbackBufferRange</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glTransformFeedbackVaryings</a></li></ul></li><li class="category es31 gl43 gl44 gl45 gl42 es30 gl32 gl33 gl40 gl41 es20 gl20 gl21 gl30 gl31">Utility<ul><li><a class="rewritelink command es31 gl43 gl44 gl45">glDispatchCompute</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glDispatchComputeIndirect</a></li><li><a class="rewritelink command gl45">glGetGraphicsResetStatus</a></li><li><a class="rewritelink command gl42 gl43 gl43 gl44 gl44 gl45 gl45">glGetInternalformat</a></li><li><a class="rewritelink command es30 es31">glGetInternalformativ</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetMultisample</a></li><li><a class="rewritelink command es31">glGetMultisamplefv</a></li><li><a class="rewritelink command es20 es30 es30 es31 gl20 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl33 gl40 gl40 gl41 gl41 gl42 gl42 gl43 gl43 gl44 gl44 gl45 gl45">glGetString</a></li><li><a class="rewritelink command es31 es31 gl42 gl43 gl44 gl45 gl45">glMemoryBarrier</a></li></ul></li><li class="category gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45 es30 es31 gl20 gl21">Queries<ul><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBeginConditionalRender</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBeginQuery</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glBeginQueryIndexed</a></li><li><a class="rewritelink command gl45">glCreateQueries</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteQueries</a></li><li><a class="rewritelink command gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glEndConditionalRender</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glEndQuery</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glEndQueryIndexed</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenQueries</a></li><li><a class="rewritelink command gl40 gl41 gl42 gl43 gl44 gl45">glGetQueryIndexed</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31 gl32 gl32 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45">glGetQueryObject</a></li><li><a class="rewritelink command es30 es31">glGetQueryObjectuiv</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetQueryiv</a></li><li><a class="rewritelink command es30 es31 gl20 gl21 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsQuery</a></li><li><a class="rewritelink command gl33 gl40 gl41 gl42 gl43 gl44 gl45">glQueryCounter</a></li></ul></li><li class="category es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Syncing<ul><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glClientWaitSync</a></li><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteSync</a></li><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glFenceSync</a></li><li><a class="rewritelink command gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGetSync</a></li><li><a class="rewritelink command es30 es31">glGetSynciv</a></li><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsSync</a></li><li><a class="rewritelink command gl45">glTextureBarrier</a></li><li><a class="rewritelink command es30 es31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glWaitSync</a></li></ul></li><li class="category es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Vertex Array Objects<ul><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindVertexArray</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteVertexArrays</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenVertexArrays</a></li><li><a class="rewritelink command es30 es31 gl30 gl31 gl32 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsVertexArray</a></li></ul></li><li class="category es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">Samplers<ul><li><a class="rewritelink command es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glBindSampler</a></li><li><a class="rewritelink command gl44 gl45">glBindSamplers</a></li><li><a class="rewritelink command gl45">glCreateSamplers</a></li><li><a class="rewritelink command es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glDeleteSamplers</a></li><li><a class="rewritelink command es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glGenSamplers</a></li><li><a class="rewritelink command es30 es30 es31 es31 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45">glGetSamplerParameter</a></li><li><a class="rewritelink command es30 es31 gl33 gl40 gl41 gl42 gl43 gl44 gl45">glIsSampler</a></li><li><a class="rewritelink command es30 es30 es30 es30 es31 es31 es31 es31 gl33 gl33 gl33 gl33 gl33 gl33 gl40 gl40 gl40 gl40 gl40 gl40 gl41 gl41 gl41 gl41 gl41 gl41 gl42 gl42 gl42 gl42 gl42 gl42 gl43 gl43 gl43 gl43 gl43 gl43 gl44 gl44 gl44 gl44 gl44 gl44 gl45 gl45 gl45 gl45 gl45 gl45">glSamplerParameter</a></li></ul></li><li class="category es31 gl41 gl42 gl43 gl44 gl45">Program Pipelines<ul><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glActiveShaderProgram</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glBindProgramPipeline</a></li><li><a class="rewritelink command gl45">glCreateProgramPipelines</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glDeleteProgramPipelines</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glGenProgramPipelines</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glGetProgramPipeline</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glGetProgramPipelineInfoLog</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glIsProgramPipeline</a></li><li><a class="rewritelink command es31 gl41 gl42 gl43 gl44 gl45">glValidateProgramPipeline</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">Immediate Mode<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glArrayElement</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glBegin</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glColor</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glEnd</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glEvalCoord</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glEvalMesh</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glEvalPoint</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glFogCoord</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glIndex</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glMaterial</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glMultiTexCoord</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glNormal</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glSecondaryColor</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glTexCoord</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glVertex</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">GL2 Rasterization<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glBitmap</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glClearIndex</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glClipPlane</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glCopyPixels</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glDrawPixels</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glFeedbackBuffer</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glFog</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glGetClipPlane</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl21 gl21 gl21 gl30 gl30 gl30 gl31 gl31 gl31">glGetMap</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl21 gl21 gl21 gl30 gl30 gl30 gl31 gl31 gl31">glGetPixelMap</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glGetPolygonStipple</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glInitNames</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glLineStipple</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glLoadName</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glMap1</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glMap2</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glMapGrid</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPassThrough</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPixelZoom</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPolygonStipple</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPopName</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPushName</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glRasterPos</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glRect</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glRenderMode</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glSelectBuffer</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31 gl31">glWindowPos</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">Client Arrays<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glColorPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glDisableClientState</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glEnableClientState</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glFogCoordPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glIndexPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glInterleavedArrays</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glNormalPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPopClientAttrib</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPushClientAttrib</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glSecondaryColorPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glTexCoordPointer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glVertexPointer</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">Fixed Function<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glAccum</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glAlphaFunc</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glClearAccum</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glColorMaterial</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glEdgeFlag</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glEdgeFlagPointer</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glGetLight</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glGetMaterial</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glGetTexEnv</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl21 gl21 gl21 gl30 gl30 gl30 gl31 gl31 gl31">glGetTexGen</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glIndexMask</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glLight</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glLightModel</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPopAttrib</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPushAttrib</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glShadeModel</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31">glTexEnv</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl20 gl20 gl20 gl21 gl21 gl21 gl21 gl21 gl21 gl30 gl30 gl30 gl30 gl30 gl30 gl31 gl31 gl31 gl31 gl31 gl31">glTexGen</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">Matrix State<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glFrustum</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glLoadIdentity</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glLoadMatrix</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glLoadTransposeMatrix</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glMatrixMode</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glMultMatrix</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glMultTransposeMatrix</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glOrtho</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPopMatrix</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPushMatrix</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glRotate</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glScale</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glTranslate</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">GL2 Textures<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glAreTexturesResident</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glClientActiveTexture</a></li><li><a class="rewritelink command gl20 gl20 gl20 gl21 gl21 gl21 gl30 gl30 gl30 gl31 gl31 gl31">glPixelMap</a></li><li><a class="rewritelink command gl20 gl20 gl21 gl21 gl30 gl30 gl31 gl31">glPixelTransfer</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glPrioritizeTextures</a></li></ul></li><li class="category gl20 gl21 gl30 gl31">Call Lists<ul><li><a class="rewritelink command gl20 gl21 gl30 gl31">glCallList</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glCallLists</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glDeleteLists</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glEndList</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glGenLists</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glIsList</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glListBase</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31">glNewList</a></li></ul></li><li class="category gl43 gl44 gl45 gl20 gl21 gl30 gl31 es31">Debug<ul><li><a class="rewritelink command gl43 gl44 gl45">glDebugMessageCallback</a></li><li><a class="rewritelink command gl43 gl44 gl45">glDebugMessageControl</a></li><li><a class="rewritelink command gl43 gl44 gl45">glDebugMessageInsert</a></li><li><a class="rewritelink command gl43 gl44 gl45">glGetDebugMessageLog</a></li><li><a class="rewritelink command gl43 gl44 gl45">glGetObjectLabel</a></li><li><a class="rewritelink command gl43 gl44 gl45">glGetObjectPtrLabel</a></li><li><a class="rewritelink command gl20 gl21 gl30 gl31 gl43 gl44 gl45">glGetPointerv</a></li><li><a class="rewritelink command es31 gl43 gl44 gl45">glGetProgramInterface</a></li><li><a class="rewritelink command gl43 gl44 gl45">glObjectLabel</a></li><li><a class="rewritelink command gl43 gl44 gl45">glObjectPtrLabel</a></li><li><a class="rewritelink command gl43 gl44 gl45">glPopDebugGroup</a></li><li><a class="rewritelink command gl43 gl44 gl45">glPushDebugGroup</a></li></ul></li></ul> <ul id="glsl_command_categories"><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Trigonometry<ul><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">acos</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">acosh</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">asin</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">asinh</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">atan</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">atanh</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">cos</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">cosh</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">degrees</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">radians</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">sin</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">sinh</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">tan</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">tanh</a></li></ul></li><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Mathematics<ul><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">abs</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">ceil</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">clamp</a></li><li><a class="rewritelink command el30 el30 el31 el31 sl33 sl33 sl40 sl40 sl41 sl41 sl42 sl42 sl43 sl43 sl44 sl44 sl45 sl45">dFdx</a></li><li><a class="rewritelink command el30 el30 el30 el31 el31 sl33 sl33 sl33 sl40 sl40 sl41 sl41 sl42 sl42 sl43 sl43 sl44 sl44 sl45 sl45">dFdy</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">exp</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">exp2</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">floor</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">floor</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">fma</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">fract</a></li><li><a class="rewritelink command el30 el30 el30 el31 el31 el31 sl33 sl33 sl33 sl40 sl40 sl40 sl41 sl41 sl41 sl42 sl42 sl42 sl43 sl43 sl44 sl44 sl45 sl45">fwidth</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">inversesqrt</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">isinf</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">isnan</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">log</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">log2</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">max</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">min</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">mix</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">mod</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">modf</a></li><li><a class="rewritelink command sl33 sl33 sl33 sl33 sl33 sl40 sl40 sl40 sl40 sl41 sl41 sl41 sl41 sl42 sl42 sl42 sl42 sl43 sl43 sl43 sl43 sl44 sl44 sl44 sl44 sl45 sl45 sl45 sl45">noise</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">pow</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">round</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">roundEven</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">sign</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">smoothstep</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">sqrt</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">step</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">trunc</a></li></ul></li><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Floating-Point<ul><li><a class="rewritelink command el30 el30 el31 el31 sl33 sl33 sl40 sl41 sl42 sl42 sl43 sl43 sl44 sl44 sl45 sl45">floatBitsToInt</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">frexp</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl40 sl41 sl41 sl42 sl42 sl43 sl43 sl44 sl44 sl45 sl45">intBitsToFloat</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">ldexp</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">packDouble2x32</a></li><li><a class="rewritelink command el30 el31 sl42 sl43 sl44 sl45">packHalf2x16</a></li><li><a class="rewritelink command el30 el30 el30 el30 el31 el31 el31 el31 sl41 sl41 sl41 sl41 sl42 sl42 sl42 sl42 sl43 sl43 sl43 sl43 sl44 sl44 sl44 sl44 sl45 sl45 sl45 sl45">packUnorm</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">unpackDouble2x32</a></li><li><a class="rewritelink command el30 el31 sl42 sl43 sl44 sl45">unpackHalf2x16</a></li><li><a class="rewritelink command el30 el30 el30 el30 el31 el31 el31 el31 sl41 sl41 sl41 sl41 sl42 sl42 sl42 sl42 sl42 sl43 sl43 sl43 sl43 sl43 sl44 sl44 sl44 sl44 sl44 sl45 sl45 sl45 sl45 sl45">unpackUnorm</a></li></ul></li><li class="category sl33 sl40 sl41 sl42 sl43 sl44 sl45 el30 el31">Built-In Variables<ul><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_ClipDistance</a></li><li><a class="rewritelink command sl45">gl_CullDistance</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_FragCoord</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_FragDepth</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_FrontFacing</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_GlobalInvocationID</a></li><li><a class="rewritelink command sl45">gl_HelperInvocation</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_InstanceID</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_InvocationID</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_Layer</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_LocalInvocationID</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_LocalInvocationIndex</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_NumSamples</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_NumWorkGroups</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_PatchVerticesIn</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_PointCoord</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_PointSize</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_Position</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_PrimitiveID</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_PrimitiveIDIn</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_SampleID</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_SampleMask</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_SampleMaskIn</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_SamplePosition</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_TessCoord</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_TessLevelInner</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">gl_TessLevelOuter</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_VertexID</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">gl_ViewportIndex</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_WorkGroupID</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">gl_WorkGroupSize</a></li></ul></li><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Vector<ul><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">cross</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">distance</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">dot</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">equal</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">faceforward</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">length</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">normalize</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">notEqual</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">reflect</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">refract</a></li></ul></li><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Component Comparison<ul><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">all</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">any</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">greaterThan</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">greaterThanEqual</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">lessThan</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">lessThanEqual</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">not</a></li></ul></li><li class="category sl40 sl41 sl42 sl43 sl44 sl45 sl33">Geometry Shader<ul><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">EmitStreamVertex</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">EmitVertex</a></li><li><a class="rewritelink command sl33 sl40 sl41 sl42 sl43 sl44 sl45">EndPrimitive</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">EndStreamPrimitive</a></li></ul></li><li class="category sl40 sl41 sl42 sl43 sl44 sl45 el30 el31 sl33">Texture Sampling<ul><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">interpolateAtCentroid</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">interpolateAtOffset</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">interpolateAtSample</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">texelFetch</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">texelFetchOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">texture</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">textureGather</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">textureGatherOffset</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">textureGatherOffsets</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureGrad</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureGradOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureLod</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureLodOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProj</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProjGrad</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProjGradOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProjLod</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProjLodOffset</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureProjOffset</a></li><li><a class="rewritelink command sl43 sl44 sl45">textureQueryLevels</a></li><li><a class="rewritelink command sl40 sl41 sl42 sl43 sl44 sl45">textureQueryLod</a></li><li><a class="rewritelink command sl45">textureSamples</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">textureSize</a></li></ul></li><li class="category el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">Matrix<ul><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">determinant</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">groupMemoryBarrier</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">inverse</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">matrixCompMult</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">outerProduct</a></li><li><a class="rewritelink command el30 el31 sl33 sl40 sl41 sl42 sl43 sl44 sl45">transpose</a></li></ul></li><li class="category el31 sl40 sl41 sl42 sl43 sl44 sl45">Integer<ul><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">bitCount</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">bitfieldExtract</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">bitfieldInsert</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">bitfieldReverse</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">findLSB</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">findMSB</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">uaddCarry</a></li><li><a class="rewritelink command el31 el31 sl40 sl40 sl41 sl41 sl42 sl42 sl43 sl44 sl45">umulExtended</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">usubBorrow</a></li></ul></li><li class="category el31 sl42 sl43 sl44 sl45">Image<ul><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicAdd</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicAnd</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicCompSwap</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicExchange</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicMax</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicMin</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicOr</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageAtomicXor</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageLoad</a></li><li><a class="rewritelink command sl45">imageSamples</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">imageSize</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">imageStore</a></li></ul></li><li class="category el31 sl43 sl44 sl45 sl42">Atomic<ul><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicAdd</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicAnd</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicCompSwap</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">atomicCounter</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">atomicCounterDecrement</a></li><li><a class="rewritelink command el31 sl42 sl43 sl44 sl45">atomicCounterIncrement</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicExchange</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicMax</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicMin</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicOr</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">atomicXor</a></li></ul></li><li class="category el31 sl40 sl41 sl42 sl43 sl44 sl45">Memory Barrier<ul><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">barrier</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">groupMemoryBarrier</a></li><li><a class="rewritelink command el31 sl40 sl41 sl42 sl43 sl44 sl45">memoryBarrier</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">memoryBarrierAtomicCounter</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">memoryBarrierBuffer</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">memoryBarrierImage</a></li><li><a class="rewritelink command el31 sl43 sl44 sl45">memoryBarrierShared</a></li></ul></li></ul> </div> <div id="khronos"> <div id="command_versions"><a href="../gl4/glGet">OpenGL 4</a><br><a href="../gl3/glGet">OpenGL 3</a><br><a class="current" href="../gl2/glGet">OpenGL 2</a><br><a href="../es3/glGet">OpenGL ES 3</a><br><a href="../es2/glGet">OpenGL ES 2</a><br></div> <h1 id="command_title">glGet</h1> <div class="refentry" lang="en" xml:lang="en"><a id="glGet"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glGet &#8212; return the value or values of a selected parameter</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetBooleanv</b>(</code></td><td>GLenum &#160;</td><td><var class="pdparam">pname</var>, </td></tr><tr><td>&#160;</td><td>GLboolean * &#160;</td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetDoublev</b>(</code></td><td>GLenum &#160;</td><td><var class="pdparam">pname</var>, </td></tr><tr><td>&#160;</td><td>GLdouble * &#160;</td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetFloatv</b>(</code></td><td>GLenum &#160;</td><td><var class="pdparam">pname</var>, </td></tr><tr><td>&#160;</td><td>GLfloat * &#160;</td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetIntegerv</b>(</code></td><td>GLenum &#160;</td><td><var class="pdparam">pname</var>, </td></tr><tr><td>&#160;</td><td>GLint * &#160;</td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>pname</code></em></span></dt><dd><p> Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. </p></dd><dt><span class="term"><em class="parameter"><code>params</code></em></span></dt><dd><p> Returns the value or values of the specified parameter. </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="description"></a><h2>Description</h2><p> These four commands return values for simple state variables in GL. <em class="parameter"><code>pname</code></em> is a symbolic constant indicating the state variable to be returned, and <em class="parameter"><code>params</code></em> is a pointer to an array of the indicated type in which to place the returned data. </p><p> Type conversion is performed if <em class="parameter"><code>params</code></em> has a different type than the state variable value being requested. If <code class="function">glGetBooleanv</code> is called, a floating-point (or integer) value is converted to <code class="constant">GL_FALSE</code> if and only if it is 0.0 (or 0). Otherwise, it is converted to <code class="constant">GL_TRUE</code>. If <code class="function">glGetIntegerv</code> is called, boolean values are returned as <code class="constant">GL_TRUE</code> or <code class="constant">GL_FALSE</code>, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and <math overflow="scroll"> <mn>-1.0</mn> </math> to the most negative representable integer value. If <code class="function">glGetFloatv</code> or <code class="function">glGetDoublev</code> is called, boolean values are returned as <code class="constant">GL_TRUE</code> or <code class="constant">GL_FALSE</code>, and integer values are converted to floating-point values. </p><p> The following symbolic constants are accepted by <em class="parameter"><code>pname</code></em>: </p><div class="variablelist"><dl><dt><span class="term"><code class="constant">GL_ACCUM_ALPHA_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of alpha bitplanes in the accumulation buffer. </p></dd><dt><span class="term"><code class="constant">GL_ACCUM_BLUE_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of blue bitplanes in the accumulation buffer. </p></dd><dt><span class="term"><code class="constant">GL_ACCUM_CLEAR_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 0, 0, 0). See <a class="citerefentry" href="glClearAccum"><span class="citerefentry"><span class="refentrytitle">glClearAccum</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ACCUM_GREEN_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of green bitplanes in the accumulation buffer. </p></dd><dt><span class="term"><code class="constant">GL_ACCUM_RED_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of red bitplanes in the accumulation buffer. </p></dd><dt><span class="term"><code class="constant">GL_ACTIVE_TEXTURE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value indicating the active multitexture unit. The initial value is <code class="constant">GL_TEXTURE0</code>. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ALIASED_POINT_SIZE_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values, the smallest and largest supported sizes for aliased points. </p></dd><dt><span class="term"><code class="constant">GL_ALIASED_LINE_WIDTH_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values, the smallest and largest supported widths for aliased lines. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha bias factor used during pixel transfers. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of alpha bitplanes in each color buffer. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha scale factor used during pixel transfers. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_TEST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether alpha testing of fragments is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glAlphaFunc"><span class="citerefentry"><span class="refentrytitle">glAlphaFunc</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_TEST_FUNC</code> <em class="parameter"><code>params</code></em> returns one value,</span></dt><dd><p> </p><p> the symbolic name of the alpha test function. The initial value is <code class="constant">GL_ALWAYS</code>. See <a class="citerefentry" href="glAlphaFunc"><span class="citerefentry"><span class="refentrytitle">glAlphaFunc</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ALPHA_TEST_REF</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the reference value for the alpha test. The initial value is 0. See <a class="citerefentry" href="glAlphaFunc"><span class="citerefentry"><span class="refentrytitle">glAlphaFunc</span></span></a>. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. </p></dd><dt><span class="term"><code class="constant">GL_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object currently bound to the target <code class="constant">GL_ARRAY_BUFFER</code>. If no buffer object is bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ATTRIB_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the depth of the attribute stack. If the stack is empty, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glPushAttrib"><span class="citerefentry"><span class="refentrytitle">glPushAttrib</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_AUTO_NORMAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D map evaluation automatically generates surface normals. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_AUX_BUFFERS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of auxiliary color buffers available. </p></dd><dt><span class="term"><code class="constant">GL_BLEND</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether blending is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values, the red, green, blue, and alpha values which are the components of the blend color. See <a class="citerefentry" href="glBlendColor"><span class="citerefentry"><span class="refentrytitle">glBlendColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_DST_ALPHA</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the symbolic constant identifying the alpha destination blend function. The initial value is <code class="constant">GL_ZERO</code>. See <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a> and <a class="citerefentry" href="glBlendFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_DST_RGB</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the symbolic constant identifying the RGB destination blend function. The initial value is <code class="constant">GL_ZERO</code>. See <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a> and <a class="citerefentry" href="glBlendFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_EQUATION_RGB</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating whether the RGB blend equation is <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MIN</code> or <code class="constant">GL_MAX</code>. See <a class="citerefentry" href="glBlendEquationSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendEquationSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_EQUATION_ALPHA</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating whether the Alpha blend equation is <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MIN</code> or <code class="constant">GL_MAX</code>. See <a class="citerefentry" href="glBlendEquationSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendEquationSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_SRC_ALPHA</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the symbolic constant identifying the alpha source blend function. The initial value is <code class="constant">GL_ONE</code>. See <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a> and <a class="citerefentry" href="glBlendFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLEND_SRC_RGB</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the symbolic constant identifying the RGB source blend function. The initial value is <code class="constant">GL_ONE</code>. See <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a> and <a class="citerefentry" href="glBlendFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glBlendFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLUE_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue bias factor used during pixel transfers. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_BLUE_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of blue bitplanes in each color buffer. </p></dd><dt><span class="term"><code class="constant">GL_BLUE_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue scale factor used during pixel transfers. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CLIENT_ACTIVE_TEXTURE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single integer value indicating the current client active multitexture unit. The initial value is <code class="constant">GL_TEXTURE0</code>. See <a class="citerefentry" href="glClientActiveTexture"><span class="citerefentry"><span class="refentrytitle">glClientActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CLIENT_ATTRIB_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value indicating the depth of the attribute stack. The initial value is 0. See <a class="citerefentry" href="glPushClientAttrib"><span class="citerefentry"><span class="refentrytitle">glPushClientAttrib</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CLIP_PLANE</code><span class="emphasis"><em>i</em></span></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the specified clipping plane is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glClipPlane"><span class="citerefentry"><span class="refentrytitle">glClipPlane</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the color array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the color array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_ARRAY_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of components per color in the color array. The initial value is 4. See <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive colors in the color array. The initial value is 0. See <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of each component in the color array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_CLEAR_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 0, 0, 0). See <a class="citerefentry" href="glClearColor"><span class="citerefentry"><span class="refentrytitle">glClearColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_LOGIC_OP</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLogicOp"><span class="citerefentry"><span class="refentrytitle">glLogicOp</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_MATERIAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether one or more material parameters are tracking the current color. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glColorMaterial"><span class="citerefentry"><span class="refentrytitle">glColorMaterial</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_MATERIAL_FACE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which materials have a parameter that is tracking the current color. The initial value is <code class="constant">GL_FRONT_AND_BACK</code>. See <a class="citerefentry" href="glColorMaterial"><span class="citerefentry"><span class="refentrytitle">glColorMaterial</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_MATERIAL_PARAMETER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which material parameters are tracking the current color. The initial value is <code class="constant">GL_AMBIENT_AND_DIFFUSE</code>. See <a class="citerefentry" href="glColorMaterial"><span class="citerefentry"><span class="refentrytitle">glColorMaterial</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns sixteen values: the color matrix on the top of the color matrix stack. Initially this matrix is the identity matrix. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_MATRIX_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the projection matrix stack. The value must be at least 2. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_SUM</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether primary and secondary color sum is enabled. See <a class="citerefentry" href="glSecondaryColor"><span class="citerefentry"><span class="refentrytitle">glSecondaryColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_TABLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the color table lookup is enabled. See <a class="citerefentry" href="glColorTable"><span class="citerefentry"><span class="refentrytitle">glColorTable</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COLOR_WRITEMASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four boolean values: the red, green, blue, and alpha write enables for the color buffers. The initial value is (<code class="constant">GL_TRUE</code>, <code class="constant">GL_TRUE</code>, <code class="constant">GL_TRUE</code>, <code class="constant">GL_TRUE</code>). See <a class="citerefentry" href="glColorMask"><span class="citerefentry"><span class="refentrytitle">glColorMask</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_COMPRESSED_TEXTURE_FORMATS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a list of symbolic constants of length <code class="constant">GL_NUM_COMPRESSED_TEXTURE_FORMATS</code> indicating which compressed texture formats are available. See <a class="citerefentry" href="glCompressedTexImage2D"><span class="citerefentry"><span class="refentrytitle">glCompressedTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CONVOLUTION_1D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D convolution is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glConvolutionFilter1D"><span class="citerefentry"><span class="refentrytitle">glConvolutionFilter1D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CONVOLUTION_2D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D convolution is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glConvolutionFilter2D"><span class="citerefentry"><span class="refentrytitle">glConvolutionFilter2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CULL_FACE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether polygon culling is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glCullFace"><span class="citerefentry"><span class="refentrytitle">glCullFace</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CULL_FACE_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which polygon faces are to be culled. The initial value is <code class="constant">GL_BACK</code>. See <a class="citerefentry" href="glCullFace"><span class="citerefentry"><span class="refentrytitle">glCullFace</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (1, 1, 1, 1). See <a class="citerefentry" href="glColor"><span class="citerefentry"><span class="refentrytitle">glColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_FOG_COORD</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the current fog coordinate. The initial value is 0. See <a class="citerefentry" href="glFogCoord"><span class="citerefentry"><span class="refentrytitle">glFogCoord</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the current color index. The initial value is 1. See <a class="citerefentry" href="glIndex"><span class="citerefentry"><span class="refentrytitle">glIndex</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_NORMAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns three values: the <span class="emphasis"><em>x</em></span>, <span class="emphasis"><em>y</em></span>, and <span class="emphasis"><em>z</em></span> values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 0, 1). See <a class="citerefentry" href="glNormal"><span class="citerefentry"><span class="refentrytitle">glNormal</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_PROGRAM</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the name of the program object that is currently active, or 0 if no program object is active. See <a class="citerefentry" href="glUseProgram"><span class="citerefentry"><span class="refentrytitle">glUseProgram</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha color values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (1, 1, 1, 1). See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_DISTANCE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the distance from the eye to the current raster position. The initial value is 0. See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the color index of the current raster position. The initial value is 1. See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_POSITION</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the <span class="emphasis"><em>x</em></span>, <span class="emphasis"><em>y</em></span>, <span class="emphasis"><em>z</em></span>, and <span class="emphasis"><em>w</em></span> components of the current raster position. <span class="emphasis"><em>x</em></span>, <span class="emphasis"><em>y</em></span>, and <span class="emphasis"><em>z</em></span> are in window coordinates, and <span class="emphasis"><em>w</em></span> is in clip coordinates. The initial value is (0, 0, 0, 1). See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_POSITION_VALID</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the current raster position is valid. The initial value is <code class="constant">GL_TRUE</code>. See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_SECONDARY_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha secondary color values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (1, 1, 1, 1). See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_RASTER_TEXTURE_COORDS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the <span class="emphasis"><em>s</em></span>, <span class="emphasis"><em>t</em></span>, <span class="emphasis"><em>r</em></span>, and <span class="emphasis"><em>q</em></span> texture coordinates of the current raster position. The initial value is (0, 0, 0, 1). See <a class="citerefentry" href="glRasterPos"><span class="citerefentry"><span class="refentrytitle">glRasterPos</span></span></a> and <a class="citerefentry" href="glMultiTexCoord"><span class="citerefentry"><span class="refentrytitle">glMultiTexCoord</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_SECONDARY_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha values of the current secondary color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 0, 0, 0). See <a class="citerefentry" href="glSecondaryColor"><span class="citerefentry"><span class="refentrytitle">glSecondaryColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_CURRENT_TEXTURE_COORDS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the <span class="emphasis"><em>s</em></span>, <span class="emphasis"><em>t</em></span>, <span class="emphasis"><em>r</em></span>, and <span class="emphasis"><em>q</em></span> current texture coordinates. The initial value is (0, 0, 0, 1). See <a class="citerefentry" href="glMultiTexCoord"><span class="citerefentry"><span class="refentrytitle">glMultiTexCoord</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the depth bias factor used during pixel transfers. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of bitplanes in the depth buffer. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_CLEAR_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is 1. See <a class="citerefentry" href="glClearDepth"><span class="citerefentry"><span class="refentrytitle">glClearDepth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_FUNC</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the symbolic constant that indicates the depth comparison function. The initial value is <code class="constant">GL_LESS</code>. See <a class="citerefentry" href="glDepthFunc"><span class="citerefentry"><span class="refentrytitle">glDepthFunc</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 1). See <a class="citerefentry" href="glDepthRange"><span class="citerefentry"><span class="refentrytitle">glDepthRange</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the depth scale factor used during pixel transfers. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_TEST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether depth testing of fragments is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glDepthFunc"><span class="citerefentry"><span class="refentrytitle">glDepthFunc</span></span></a> and <a class="citerefentry" href="glDepthRange"><span class="citerefentry"><span class="refentrytitle">glDepthRange</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_WRITEMASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating if the depth buffer is enabled for writing. The initial value is <code class="constant">GL_TRUE</code>. See <a class="citerefentry" href="glDepthMask"><span class="citerefentry"><span class="refentrytitle">glDepthMask</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_DITHER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether dithering of fragment colors and indices is enabled. The initial value is <code class="constant">GL_TRUE</code>. </p></dd><dt><span class="term"><code class="constant">GL_DOUBLEBUFFER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether double buffering is supported. </p></dd><dt><span class="term"><code class="constant">GL_DRAW_BUFFER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which buffers are being drawn to. See <a class="citerefentry" href="glDrawBuffer"><span class="citerefentry"><span class="refentrytitle">glDrawBuffer</span></span></a>. The initial value is <code class="constant">GL_BACK</code> if there are back buffers, otherwise it is <code class="constant">GL_FRONT</code>. </p></dd><dt><span class="term"><code class="constant">GL_DRAW_BUFFER</code><span class="emphasis"><em>i</em></span></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which buffers are being drawn to by the corresponding output color. See <a class="citerefentry" href="glDrawBuffers"><span class="citerefentry"><span class="refentrytitle">glDrawBuffers</span></span></a>. The initial value of <code class="constant">GL_DRAW_BUFFER0</code> is <code class="constant">GL_BACK</code> if there are back buffers, otherwise it is <code class="constant">GL_FRONT</code>. The initial values of draw buffers for all other output colors is <code class="constant">GL_NONE</code>. </p></dd><dt><span class="term"><code class="constant">GL_EDGE_FLAG</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the current edge flag is <code class="constant">GL_TRUE</code> or <code class="constant">GL_FALSE</code>. The initial value is <code class="constant">GL_TRUE</code>. See <a class="citerefentry" href="glEdgeFlag"><span class="citerefentry"><span class="refentrytitle">glEdgeFlag</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_EDGE_FLAG_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the edge flag array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glEdgeFlagPointer"><span class="citerefentry"><span class="refentrytitle">glEdgeFlagPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_EDGE_FLAG_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the edge flag array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glEdgeFlagPointer"><span class="citerefentry"><span class="refentrytitle">glEdgeFlagPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_EDGE_FLAG_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive edge flags in the edge flag array. The initial value is 0. See <a class="citerefentry" href="glEdgeFlagPointer"><span class="citerefentry"><span class="refentrytitle">glEdgeFlagPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ELEMENT_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object currently bound to the target <code class="constant">GL_ELEMENT_ARRAY_BUFFER</code>. If no buffer object is bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FEEDBACK_BUFFER_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the feedback buffer. See <a class="citerefentry" href="glFeedbackBuffer"><span class="citerefentry"><span class="refentrytitle">glFeedbackBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FEEDBACK_BUFFER_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the type of the feedback buffer. See <a class="citerefentry" href="glFeedbackBuffer"><span class="citerefentry"><span class="refentrytitle">glFeedbackBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether fogging is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COORD_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the fog coordinate array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glFogCoordPointer"><span class="citerefentry"><span class="refentrytitle">glFogCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COORD_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the fog coordinate array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glFogCoordPointer"><span class="citerefentry"><span class="refentrytitle">glFogCoordPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COORD_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive fog coordinates in the fog coordinate array. The initial value is 0. See <a class="citerefentry" href="glFogCoordPointer"><span class="citerefentry"><span class="refentrytitle">glFogCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COORD_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the type of the fog coordinate array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glFogCoordPointer"><span class="citerefentry"><span class="refentrytitle">glFogCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COORD_SRC</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the source of the fog coordinate. The initial value is <code class="constant">GL_FRAGMENT_DEPTH</code>. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0, 0, 0, 0). See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_DENSITY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the fog density parameter. The initial value is 1. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_END</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the end factor for the linear fog equation. The initial value is 1. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the fog hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the fog color index. The initial value is 0. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which fog equation is selected. The initial value is <code class="constant">GL_EXP</code>. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FOG_START</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the start factor for the linear fog equation. The initial value is 0. See <a class="citerefentry" href="glFog"><span class="citerefentry"><span class="refentrytitle">glFog</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the derivative accuracy hint for fragment shaders. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_FRONT_FACE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. The initial value is <code class="constant">GL_CCW</code>. See <a class="citerefentry" href="glFrontFace"><span class="citerefentry"><span class="refentrytitle">glFrontFace</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_GENERATE_MIPMAP_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the mipmap generation filtering hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_GREEN_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green bias factor used during pixel transfers. The initial value is 0. </p></dd><dt><span class="term"><code class="constant">GL_GREEN_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of green bitplanes in each color buffer. </p></dd><dt><span class="term"><code class="constant">GL_GREEN_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green scale factor used during pixel transfers. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_HISTOGRAM</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether histogram is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glHistogram"><span class="citerefentry"><span class="refentrytitle">glHistogram</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the color index array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glIndexPointer"><span class="citerefentry"><span class="refentrytitle">glIndexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the color index array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glIndexPointer"><span class="citerefentry"><span class="refentrytitle">glIndexPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive color indexes in the color index array. The initial value is 0. See <a class="citerefentry" href="glIndexPointer"><span class="citerefentry"><span class="refentrytitle">glIndexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of indexes in the color index array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glIndexPointer"><span class="citerefentry"><span class="refentrytitle">glIndexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of bitplanes in each color index buffer. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_CLEAR_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the color index used to clear the color index buffers. The initial value is 0. See <a class="citerefentry" href="glClearIndex"><span class="citerefentry"><span class="refentrytitle">glClearIndex</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_LOGIC_OP</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLogicOp"><span class="citerefentry"><span class="refentrytitle">glLogicOp</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the GL is in color index mode (<code class="constant">GL_TRUE</code>) or RGBA mode (<code class="constant">GL_FALSE</code>). </p></dd><dt><span class="term"><code class="constant">GL_INDEX_OFFSET</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the offset added to color and stencil indices during pixel transfers. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_SHIFT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the amount that color and stencil indices are shifted during pixel transfers. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_INDEX_WRITEMASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a mask indicating which bitplanes of each color index buffer can be written. The initial value is all 1's. See <a class="citerefentry" href="glIndexMask"><span class="citerefentry"><span class="refentrytitle">glIndexMask</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHT</code><span class="emphasis"><em>i</em></span></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the specified light is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a> and <a class="citerefentry" href="glLightModel"><span class="citerefentry"><span class="refentrytitle">glLightModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHTING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether lighting is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLightModel"><span class="citerefentry"><span class="refentrytitle">glLightModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHT_MODEL_AMBIENT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and <math overflow="scroll"> <mn>-1.0</mn> </math> returns the most negative representable integer value. The initial value is (0.2, 0.2, 0.2, 1.0). See <a class="citerefentry" href="glLightModel"><span class="citerefentry"><span class="refentrytitle">glLightModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHT_MODEL_COLOR_CONTROL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns single enumerated value indicating whether specular reflection calculations are separated from normal lighting computations. The initial value is <code class="constant">GL_SINGLE_COLOR</code>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHT_MODEL_LOCAL_VIEWER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLightModel"><span class="citerefentry"><span class="refentrytitle">glLightModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIGHT_MODEL_TWO_SIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether separate materials are used to compute lighting for front- and back-facing polygons. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLightModel"><span class="citerefentry"><span class="refentrytitle">glLightModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_SMOOTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether antialiasing of lines is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_SMOOTH_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the line antialiasing hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_STIPPLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether stippling of lines is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glLineStipple"><span class="citerefentry"><span class="refentrytitle">glLineStipple</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_STIPPLE_PATTERN</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the 16-bit line stipple pattern. The initial value is all 1's. See <a class="citerefentry" href="glLineStipple"><span class="citerefentry"><span class="refentrytitle">glLineStipple</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_STIPPLE_REPEAT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the line stipple repeat factor. The initial value is 1. See <a class="citerefentry" href="glLineStipple"><span class="citerefentry"><span class="refentrytitle">glLineStipple</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_WIDTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the line width as specified with <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. The initial value is 1. </p></dd><dt><span class="term"><code class="constant">GL_LINE_WIDTH_GRANULARITY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the width difference between adjacent supported widths for antialiased lines. See <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LINE_WIDTH_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the smallest and largest supported widths for antialiased lines. See <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIST_BASE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the base offset added to all names in arrays presented to <a class="citerefentry" href="glCallLists"><span class="citerefentry"><span class="refentrytitle">glCallLists</span></span></a>. The initial value is 0. See <a class="citerefentry" href="glListBase"><span class="citerefentry"><span class="refentrytitle">glListBase</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIST_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the name of the display list currently under construction. 0 is returned if no display list is currently under construction. The initial value is 0. See <a class="citerefentry" href="glNewList"><span class="citerefentry"><span class="refentrytitle">glNewList</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LIST_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the construction mode of the display list currently under construction. The initial value is 0. See <a class="citerefentry" href="glNewList"><span class="citerefentry"><span class="refentrytitle">glNewList</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_LOGIC_OP_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the selected logic operation mode. The initial value is <code class="constant">GL_COPY</code>. See <a class="citerefentry" href="glLogicOp"><span class="citerefentry"><span class="refentrytitle">glLogicOp</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_COLOR_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates colors. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_GRID_DOMAIN</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the endpoints of the 1D map's grid domain. The initial value is (0, 1). See <a class="citerefentry" href="glMapGrid"><span class="citerefentry"><span class="refentrytitle">glMapGrid</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_GRID_SEGMENTS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of partitions in the 1D map's grid domain. The initial value is 1. See <a class="citerefentry" href="glMapGrid"><span class="citerefentry"><span class="refentrytitle">glMapGrid</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates color indices. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_NORMAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates normals. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_TEXTURE_COORD_1</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 1D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_TEXTURE_COORD_2</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 2D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_TEXTURE_COORD_3</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 3D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_TEXTURE_COORD_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 4D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_VERTEX_3</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 3D vertex coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP1_VERTEX_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D evaluation generates 4D vertex coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_COLOR_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates colors. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_GRID_DOMAIN</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the endpoints of the 2D map's <math overflow="scroll"><mi mathvariant="italic">i</mi></math> and <math overflow="scroll"><mi mathvariant="italic">j</mi></math> grid domains. The initial value is (0,1; 0,1). See <a class="citerefentry" href="glMapGrid"><span class="citerefentry"><span class="refentrytitle">glMapGrid</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_GRID_SEGMENTS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the number of partitions in the 2D map's <math overflow="scroll"><mi mathvariant="italic">i</mi></math> and <math overflow="scroll"><mi mathvariant="italic">j</mi></math> grid domains. The initial value is (1,1). See <a class="citerefentry" href="glMapGrid"><span class="citerefentry"><span class="refentrytitle">glMapGrid</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_INDEX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates color indices. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_NORMAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates normals. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_TEXTURE_COORD_1</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 1D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_TEXTURE_COORD_2</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 2D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_TEXTURE_COORD_3</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 3D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_TEXTURE_COORD_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 4D texture coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_VERTEX_3</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 3D vertex coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP2_VERTEX_4</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D evaluation generates 4D vertex coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP_COLOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating if colors and color indices are to be replaced by table lookup during pixel transfers. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAP_STENCIL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating if stencil indices are to be replaced by table lookup during pixel transfers. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MATRIX_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which matrix stack is currently the target of all matrix operations. The initial value is <code class="constant">GL_MODELVIEW</code>. See <a class="citerefentry" href="glMatrixMode"><span class="citerefentry"><span class="refentrytitle">glMatrixMode</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_3D_TEXTURE_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a rough estimate of the largest 3D texture that the GL can handle. The value must be at least 16. If the GL version is 1.2 or greater, use <code class="constant">GL_PROXY_TEXTURE_3D</code> to determine if a texture is too large. See <a class="citerefentry" href="glTexImage3D"><span class="citerefentry"><span class="refentrytitle">glTexImage3D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_CLIENT_ATTRIB_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value indicating the maximum supported depth of the client attribute stack. See <a class="citerefentry" href="glPushClientAttrib"><span class="citerefentry"><span class="refentrytitle">glPushClientAttrib</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_ATTRIB_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the attribute stack. The value must be at least 16. See <a class="citerefentry" href="glPushAttrib"><span class="citerefentry"><span class="refentrytitle">glPushAttrib</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_CLIP_PLANES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of application-defined clipping planes. The value must be at least 6. See <a class="citerefentry" href="glClipPlane"><span class="citerefentry"><span class="refentrytitle">glClipPlane</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_COLOR_MATRIX_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the color matrix stack. The value must be at least 2. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported texture image units that can be used to access texture maps from the vertex shader and the fragment processor combined. If both the vertex shader and the fragment processing stage access the same texture image unit, then that counts as using two texture image units against this limit. The value must be at least 2. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value. The value gives a rough estimate of the largest cube-map texture that the GL can handle. The value must be at least 16. If the GL version is 1.3 or greater, use <code class="constant">GL_PROXY_TEXTURE_CUBE_MAP</code> to determine if a texture is too large. See <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_DRAW_BUFFERS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of simultaneous output colors allowed from a fragment shader using the <code class="code">gl_FragData</code> built-in array. The value must be at least 1. See <a class="citerefentry" href="glDrawBuffers"><span class="citerefentry"><span class="refentrytitle">glDrawBuffers</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_ELEMENTS_INDICES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the recommended maximum number of vertex array indices. See <a class="citerefentry" href="glDrawRangeElements"><span class="citerefentry"><span class="refentrytitle">glDrawRangeElements</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_ELEMENTS_VERTICES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the recommended maximum number of vertex array vertices. See <a class="citerefentry" href="glDrawRangeElements"><span class="citerefentry"><span class="refentrytitle">glDrawRangeElements</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_EVAL_ORDER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum equation order supported by 1D and 2D evaluators. The value must be at least 8. See <a class="citerefentry" href="glMap1"><span class="citerefentry"><span class="refentrytitle">glMap1</span></span></a> and <a class="citerefentry" href="glMap2"><span class="citerefentry"><span class="refentrytitle">glMap2</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of individual floating-point, integer, or boolean values that can be held in uniform variable storage for a fragment shader. The value must be at least 64. See <a class="citerefentry" href="glUniform"><span class="citerefentry"><span class="refentrytitle">glUniform</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_LIGHTS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of lights. The value must be at least 8. See <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_LIST_NESTING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum recursion depth allowed during display-list traversal. The value must be at least 64. See <a class="citerefentry" href="glCallList"><span class="citerefentry"><span class="refentrytitle">glCallList</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_MODELVIEW_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the modelview matrix stack. The value must be at least 32. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_NAME_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the selection name stack. The value must be at least 64. See <a class="citerefentry" href="glPushName"><span class="citerefentry"><span class="refentrytitle">glPushName</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_PIXEL_MAP_TABLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported size of a <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a> lookup table. The value must be at least 32. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_PROJECTION_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the projection matrix stack. The value must be at least 2. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_COORDS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of texture coordinate sets available to vertex and fragment shaders. The value must be at least 2. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a> and <a class="citerefentry" href="glClientActiveTexture"><span class="citerefentry"><span class="refentrytitle">glClientActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_IMAGE_UNITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported texture image units that can be used to access texture maps from the fragment shader. The value must be at least 2. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_LOD_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum, absolute value of the texture level-of-detail bias. The value must be at least 4. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value. The value gives a rough estimate of the largest texture that the GL can handle. The value must be at least 64. If the GL version is 1.1 or greater, use <code class="constant">GL_PROXY_TEXTURE_1D</code> or <code class="constant">GL_PROXY_TEXTURE_2D</code> to determine if a texture is too large. See <a class="citerefentry" href="glTexImage1D"><span class="citerefentry"><span class="refentrytitle">glTexImage1D</span></span></a> and <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported depth of the texture matrix stack. The value must be at least 2. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_TEXTURE_UNITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value indicating the number of conventional texture units supported. Each conventional texture unit includes both a texture coordinate set and a texture image unit. Conventional texture units may be used for fixed-function (non-shader) rendering. The value must be at least 2. Additional texture coordinate sets and texture image units may be accessed from vertex and fragment shaders. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a> and <a class="citerefentry" href="glClientActiveTexture"><span class="citerefentry"><span class="refentrytitle">glClientActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_VARYING_FLOATS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of interpolators available for processing varying variables used by vertex and fragment shaders. This value represents the number of individual floating-point values that can be interpolated; varying variables declared as vectors, matrices, and arrays will all consume multiple interpolators. The value must be at least 32. </p></dd><dt><span class="term"><code class="constant">GL_MAX_VERTEX_ATTRIBS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of 4-component generic vertex attributes accessible to a vertex shader. The value must be at least 16. See <a class="citerefentry" href="glVertexAttrib"><span class="citerefentry"><span class="refentrytitle">glVertexAttrib</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum supported texture image units that can be used to access texture maps from the vertex shader. The value may be 0. See <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_VERTEX_UNIFORM_COMPONENTS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the maximum number of individual floating-point, integer, or boolean values that can be held in uniform variable storage for a vertex shader. The value must be at least 512. See <a class="citerefentry" href="glUniform"><span class="citerefentry"><span class="refentrytitle">glUniform</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MAX_VIEWPORT_DIMS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the maximum supported width and height of the viewport. These must be at least as large as the visible dimensions of the display being rendered to. See <a class="citerefentry" href="glViewport"><span class="citerefentry"><span class="refentrytitle">glViewport</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MINMAX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether pixel minmax values are computed. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glMinmax"><span class="citerefentry"><span class="refentrytitle">glMinmax</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MODELVIEW_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns sixteen values: the modelview matrix on the top of the modelview matrix stack. Initially this matrix is the identity matrix. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_MODELVIEW_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of matrices on the modelview matrix stack. The initial value is 1. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NAME_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of names on the selection name stack. The initial value is 0. See <a class="citerefentry" href="glPushName"><span class="citerefentry"><span class="refentrytitle">glPushName</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NORMAL_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value, indicating whether the normal array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glNormalPointer"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NORMAL_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the normal array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glNormalPointer"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NORMAL_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive normals in the normal array. The initial value is 0. See <a class="citerefentry" href="glNormalPointer"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NORMAL_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of each coordinate in the normal array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glNormalPointer"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NORMALIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glNormal"><span class="citerefentry"><span class="refentrytitle">glNormal</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_NUM_COMPRESSED_TEXTURE_FORMATS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single integer value indicating the number of available compressed texture formats. The minimum value is 0. See <a class="citerefentry" href="glCompressedTexImage2D"><span class="citerefentry"><span class="refentrytitle">glCompressedTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_ALIGNMENT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte alignment used for writing pixel data to memory. The initial value is 4. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_IMAGE_HEIGHT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the image height used for writing pixel data to memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_LSB_FIRST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_ROW_LENGTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the row length used for writing pixel data to memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_SKIP_IMAGES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of pixel images skipped before the first pixel is written into memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_SKIP_PIXELS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of pixel locations skipped before the first pixel is written into memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_SKIP_ROWS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of rows of pixel locations skipped before the first pixel is written into memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PACK_SWAP_BYTES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the bytes of two-byte and four-byte pixel indices and components are swapped before being written to memory. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PERSPECTIVE_CORRECTION_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the perspective correction hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_A_TO_A_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the alpha-to-alpha pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_B_TO_B_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the blue-to-blue pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_G_TO_G_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the green-to-green pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_I_TO_A_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the index-to-alpha pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_I_TO_B_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the index-to-blue pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_I_TO_G_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the index-to-green pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_I_TO_I_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the index-to-index pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_I_TO_R_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the index-to-red pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_R_TO_R_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the red-to-red pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_MAP_S_TO_S_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size of the stencil-to-stencil pixel translation table. The initial value is 1. See <a class="citerefentry" href="glPixelMap"><span class="citerefentry"><span class="refentrytitle">glPixelMap</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_PACK_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object currently bound to the target <code class="constant">GL_PIXEL_PACK_BUFFER</code>. If no buffer object is bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PIXEL_UNPACK_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object currently bound to the target <code class="constant">GL_PIXEL_UNPACK_BUFFER</code>. If no buffer object is bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_DISTANCE_ATTENUATION</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns three values, the coefficients for computing the attenuation value for points. See <a class="citerefentry" href="glPointParameter"><span class="citerefentry"><span class="refentrytitle">glPointParameter</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_FADE_THRESHOLD_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the point size threshold for determining the point size. See <a class="citerefentry" href="glPointParameter"><span class="citerefentry"><span class="refentrytitle">glPointParameter</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the point size as specified by <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. The initial value is 1. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SIZE_GRANULARITY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the size difference between adjacent supported sizes for antialiased points. See <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SIZE_MAX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the upper bound for the attenuated point sizes. The initial value is 0.0. See <a class="citerefentry" href="glPointParameter"><span class="citerefentry"><span class="refentrytitle">glPointParameter</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SIZE_MIN</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the lower bound for the attenuated point sizes. The initial value is 1.0. See <a class="citerefentry" href="glPointParameter"><span class="citerefentry"><span class="refentrytitle">glPointParameter</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SIZE_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: the smallest and largest supported sizes for antialiased points. The smallest size must be at most 1, and the largest size must be at least 1. See <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SMOOTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether antialiasing of points is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SMOOTH_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the point antialiasing hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POINT_SPRITE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether point sprite is enabled. The initial value is <code class="constant">GL_FALSE</code>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. The initial value is <code class="constant">GL_FILL</code>. See <a class="citerefentry" href="glPolygonMode"><span class="citerefentry"><span class="refentrytitle">glPolygonMode</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_OFFSET_FACTOR</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. The initial value is 0. See <a class="citerefentry" href="glPolygonOffset"><span class="citerefentry"><span class="refentrytitle">glPolygonOffset</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_OFFSET_UNITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. The initial value is 0. See <a class="citerefentry" href="glPolygonOffset"><span class="citerefentry"><span class="refentrytitle">glPolygonOffset</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_OFFSET_FILL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether polygon offset is enabled for polygons in fill mode. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPolygonOffset"><span class="citerefentry"><span class="refentrytitle">glPolygonOffset</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_OFFSET_LINE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether polygon offset is enabled for polygons in line mode. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPolygonOffset"><span class="citerefentry"><span class="refentrytitle">glPolygonOffset</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_OFFSET_POINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether polygon offset is enabled for polygons in point mode. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPolygonOffset"><span class="citerefentry"><span class="refentrytitle">glPolygonOffset</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_SMOOTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether antialiasing of polygons is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPolygonMode"><span class="citerefentry"><span class="refentrytitle">glPolygonMode</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_SMOOTH_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating the mode of the polygon antialiasing hint. The initial value is <code class="constant">GL_DONT_CARE</code>. See <a class="citerefentry" href="glHint"><span class="citerefentry"><span class="refentrytitle">glHint</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POLYGON_STIPPLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether polygon stippling is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPolygonStipple"><span class="citerefentry"><span class="refentrytitle">glPolygonStipple</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_COLOR_TABLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether post color matrix transformation lookup is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glColorTable"><span class="citerefentry"><span class="refentrytitle">glColorTable</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_RED_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red bias factor applied to RGBA fragments after color matrix transformations. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_GREEN_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green bias factor applied to RGBA fragments after color matrix transformations. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a> </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_BLUE_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue bias factor applied to RGBA fragments after color matrix transformations. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_ALPHA_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha bias factor applied to RGBA fragments after color matrix transformations. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_RED_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red scale factor applied to RGBA fragments after color matrix transformations. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_GREEN_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green scale factor applied to RGBA fragments after color matrix transformations. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_BLUE_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue scale factor applied to RGBA fragments after color matrix transformations. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_COLOR_MATRIX_ALPHA_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha scale factor applied to RGBA fragments after color matrix transformations. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_COLOR_TABLE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether post convolution lookup is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glColorTable"><span class="citerefentry"><span class="refentrytitle">glColorTable</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_RED_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red bias factor applied to RGBA fragments after convolution. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_GREEN_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green bias factor applied to RGBA fragments after convolution. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_BLUE_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue bias factor applied to RGBA fragments after convolution. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_ALPHA_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha bias factor applied to RGBA fragments after convolution. The initial value is 0. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_RED_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red scale factor applied to RGBA fragments after convolution. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_GREEN_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the green scale factor applied to RGBA fragments after convolution. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_BLUE_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the blue scale factor applied to RGBA fragments after convolution. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_POST_CONVOLUTION_ALPHA_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the alpha scale factor applied to RGBA fragments after convolution. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PROJECTION_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns sixteen values: the projection matrix on the top of the projection matrix stack. Initially this matrix is the identity matrix. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_PROJECTION_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of matrices on the projection matrix stack. The initial value is 1. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_READ_BUFFER</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating which color buffer is selected for reading. The initial value is <code class="constant">GL_BACK</code> if there is a back buffer, otherwise it is <code class="constant">GL_FRONT</code>. See <a class="citerefentry" href="glReadPixels"><span class="citerefentry"><span class="refentrytitle">glReadPixels</span></span></a> and <a class="citerefentry" href="glAccum"><span class="citerefentry"><span class="refentrytitle">glAccum</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_RED_BIAS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red bias factor used during pixel transfers. The initial value is 0. </p></dd><dt><span class="term"><code class="constant">GL_RED_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of red bitplanes in each color buffer. </p></dd><dt><span class="term"><code class="constant">GL_RED_SCALE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the red scale factor used during pixel transfers. The initial value is 1. See <a class="citerefentry" href="glPixelTransfer"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_RENDER_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating whether the GL is in render, select, or feedback mode. The initial value is <code class="constant">GL_RENDER</code>. See <a class="citerefentry" href="glRenderMode"><span class="citerefentry"><span class="refentrytitle">glRenderMode</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_RESCALE_NORMAL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns single boolean value indicating whether normal rescaling is enabled. See <a class="citerefentry" href="glEnable"><span class="citerefentry"><span class="refentrytitle">glEnable</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_RGBA_MODE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the GL is in RGBA mode (true) or color index mode (false). See <a class="citerefentry" href="glColor"><span class="citerefentry"><span class="refentrytitle">glColor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SAMPLE_BUFFERS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single integer value indicating the number of sample buffers associated with the framebuffer. See <a class="citerefentry" href="glSampleCoverage"><span class="citerefentry"><span class="refentrytitle">glSampleCoverage</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SAMPLE_COVERAGE_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single positive floating-point value indicating the current sample coverage value. See <a class="citerefentry" href="glSampleCoverage"><span class="citerefentry"><span class="refentrytitle">glSampleCoverage</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SAMPLE_COVERAGE_INVERT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating if the temporary coverage value should be inverted. See <a class="citerefentry" href="glSampleCoverage"><span class="citerefentry"><span class="refentrytitle">glSampleCoverage</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SAMPLES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single integer value indicating the coverage mask size. See <a class="citerefentry" href="glSampleCoverage"><span class="citerefentry"><span class="refentrytitle">glSampleCoverage</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SCISSOR_BOX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the <math overflow="scroll"><mi mathvariant="italic">x</mi></math> and <math overflow="scroll"><mi mathvariant="italic">y</mi></math> window coordinates of the scissor box, followed by its width and height. Initially the <math overflow="scroll"><mi mathvariant="italic">x</mi></math> and <math overflow="scroll"><mi mathvariant="italic">y</mi></math> window coordinates are both 0 and the width and height are set to the size of the window. See <a class="citerefentry" href="glScissor"><span class="citerefentry"><span class="refentrytitle">glScissor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SCISSOR_TEST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether scissoring is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glScissor"><span class="citerefentry"><span class="refentrytitle">glScissor</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SECONDARY_COLOR_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the secondary color array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glSecondaryColorPointer"><span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the secondary color array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glSecondaryColorPointer"><span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SECONDARY_COLOR_ARRAY_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of components per color in the secondary color array. The initial value is 3. See <a class="citerefentry" href="glSecondaryColorPointer"><span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SECONDARY_COLOR_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive colors in the secondary color array. The initial value is 0. See <a class="citerefentry" href="glSecondaryColorPointer"><span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SECONDARY_COLOR_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of each component in the secondary color array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glSecondaryColorPointer"><span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SELECTION_BUFFER_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> return one value, the size of the selection buffer. See <a class="citerefentry" href="glSelectBuffer"><span class="citerefentry"><span class="refentrytitle">glSelectBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SEPARABLE_2D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D separable convolution is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glSeparableFilter2D"><span class="citerefentry"><span class="refentrytitle">glSeparableFilter2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SHADE_MODEL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating whether the shading mode is flat or smooth. The initial value is <code class="constant">GL_SMOOTH</code>. See <a class="citerefentry" href="glShadeModel"><span class="citerefentry"><span class="refentrytitle">glShadeModel</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SMOOTH_LINE_WIDTH_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values, the smallest and largest supported widths for antialiased lines. See <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SMOOTH_LINE_WIDTH_GRANULARITY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the granularity of widths for antialiased lines. See <a class="citerefentry" href="glLineWidth"><span class="citerefentry"><span class="refentrytitle">glLineWidth</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SMOOTH_POINT_SIZE_RANGE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns two values, the smallest and largest supported widths for antialiased points. See <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_SMOOTH_POINT_SIZE_GRANULARITY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the granularity of sizes for antialiased points. See <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_FAIL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken for back-facing polygons when the stencil test fails. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_FUNC</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what function is used for back-facing polygons to compare the stencil reference value with the stencil buffer value. The initial value is <code class="constant">GL_ALWAYS</code>. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_PASS_DEPTH_FAIL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken for back-facing polygons when the stencil test passes, but the depth test fails. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_PASS_DEPTH_PASS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken for back-facing polygons when the stencil test passes and the depth test passes. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_REF</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the reference value that is compared with the contents of the stencil buffer for back-facing polygons. The initial value is 0. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_VALUE_MASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the mask that is used for back-facing polygons to mask both the stencil reference value and the stencil buffer value before they are compared. The initial value is all 1's. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BACK_WRITEMASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the mask that controls writing of the stencil bitplanes for back-facing polygons. The initial value is all 1's. See <a class="citerefentry" href="glStencilMaskSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilMaskSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of bitplanes in the stencil buffer. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_CLEAR_VALUE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the index to which the stencil bitplanes are cleared. The initial value is 0. See <a class="citerefentry" href="glClearStencil"><span class="citerefentry"><span class="refentrytitle">glClearStencil</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_FAIL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken when the stencil test fails. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOp"><span class="citerefentry"><span class="refentrytitle">glStencilOp</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_FUNC</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. The initial value is <code class="constant">GL_ALWAYS</code>. See <a class="citerefentry" href="glStencilFunc"><span class="citerefentry"><span class="refentrytitle">glStencilFunc</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_PASS_DEPTH_FAIL</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOp"><span class="citerefentry"><span class="refentrytitle">glStencilOp</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_PASS_DEPTH_PASS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. The initial value is <code class="constant">GL_KEEP</code>. See <a class="citerefentry" href="glStencilOp"><span class="citerefentry"><span class="refentrytitle">glStencilOp</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilOpSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilOpSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_REF</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the reference value that is compared with the contents of the stencil buffer. The initial value is 0. See <a class="citerefentry" href="glStencilFunc"><span class="citerefentry"><span class="refentrytitle">glStencilFunc</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_TEST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether stencil testing of fragments is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glStencilFunc"><span class="citerefentry"><span class="refentrytitle">glStencilFunc</span></span></a> and <a class="citerefentry" href="glStencilOp"><span class="citerefentry"><span class="refentrytitle">glStencilOp</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_VALUE_MASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. The initial value is all 1's. See <a class="citerefentry" href="glStencilFunc"><span class="citerefentry"><span class="refentrytitle">glStencilFunc</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilFuncSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilFuncSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STENCIL_WRITEMASK</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the mask that controls writing of the stencil bitplanes. The initial value is all 1's. See <a class="citerefentry" href="glStencilMask"><span class="citerefentry"><span class="refentrytitle">glStencilMask</span></span></a>. If the GL version is 2.0 or greater, this stencil state only affects non-polygons and front-facing polygons. Back-facing polygons use separate stencil state. See <a class="citerefentry" href="glStencilMaskSeparate"><span class="citerefentry"><span class="refentrytitle">glStencilMaskSeparate</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_STEREO</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether stereo buffers (left and right) are supported. </p></dd><dt><span class="term"><code class="constant">GL_SUBPIXEL_BITS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. The value must be at least 4. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_1D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 1D texture mapping is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexImage1D"><span class="citerefentry"><span class="refentrytitle">glTexImage1D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_BINDING_1D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the texture currently bound to the target <code class="constant">GL_TEXTURE_1D</code>. The initial value is 0. See <a class="citerefentry" href="glBindTexture"><span class="citerefentry"><span class="refentrytitle">glBindTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_2D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 2D texture mapping is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_BINDING_2D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the texture currently bound to the target <code class="constant">GL_TEXTURE_2D</code>. The initial value is 0. See <a class="citerefentry" href="glBindTexture"><span class="citerefentry"><span class="refentrytitle">glBindTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_3D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether 3D texture mapping is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexImage3D"><span class="citerefentry"><span class="refentrytitle">glTexImage3D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_BINDING_3D</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the texture currently bound to the target <code class="constant">GL_TEXTURE_3D</code>. The initial value is 0. See <a class="citerefentry" href="glBindTexture"><span class="citerefentry"><span class="refentrytitle">glBindTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_BINDING_CUBE_MAP</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the texture currently bound to the target <code class="constant">GL_TEXTURE_CUBE_MAP</code>. The initial value is 0. See <a class="citerefentry" href="glBindTexture"><span class="citerefentry"><span class="refentrytitle">glBindTexture</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COMPRESSION_HINT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value indicating the mode of the texture compression hint. The initial value is <code class="constant">GL_DONT_CARE</code>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COORD_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the texture coordinate array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the texture coordinate array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COORD_ARRAY_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of coordinates per element in the texture coordinate array. The initial value is 4. See <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COORD_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive elements in the texture coordinate array. The initial value is 0. See <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_COORD_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of the coordinates in the texture coordinate array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_CUBE_MAP</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether cube-mapped texture mapping is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_GEN_Q</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether automatic generation of the <span class="emphasis"><em>q</em></span> texture coordinate is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexGen"><span class="citerefentry"><span class="refentrytitle">glTexGen</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_GEN_R</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether automatic generation of the <span class="emphasis"><em>r</em></span> texture coordinate is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexGen"><span class="citerefentry"><span class="refentrytitle">glTexGen</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_GEN_S</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether automatic generation of the <span class="emphasis"><em>S</em></span> texture coordinate is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexGen"><span class="citerefentry"><span class="refentrytitle">glTexGen</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_GEN_T</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether automatic generation of the T texture coordinate is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glTexGen"><span class="citerefentry"><span class="refentrytitle">glTexGen</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns sixteen values: the texture matrix on the top of the texture matrix stack. Initially this matrix is the identity matrix. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TEXTURE_STACK_DEPTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of matrices on the texture matrix stack. The initial value is 1. See <a class="citerefentry" href="glPushMatrix"><span class="citerefentry"><span class="refentrytitle">glPushMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TRANSPOSE_COLOR_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns 16 values, the elements of the color matrix in row-major order. See <a class="citerefentry" href="glLoadTransposeMatrix"><span class="citerefentry"><span class="refentrytitle">glLoadTransposeMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TRANSPOSE_MODELVIEW_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns 16 values, the elements of the modelview matrix in row-major order. See <a class="citerefentry" href="glLoadTransposeMatrix"><span class="citerefentry"><span class="refentrytitle">glLoadTransposeMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TRANSPOSE_PROJECTION_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns 16 values, the elements of the projection matrix in row-major order. See <a class="citerefentry" href="glLoadTransposeMatrix"><span class="citerefentry"><span class="refentrytitle">glLoadTransposeMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_TRANSPOSE_TEXTURE_MATRIX</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns 16 values, the elements of the texture matrix in row-major order. See <a class="citerefentry" href="glLoadTransposeMatrix"><span class="citerefentry"><span class="refentrytitle">glLoadTransposeMatrix</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_ALIGNMENT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte alignment used for reading pixel data from memory. The initial value is 4. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_IMAGE_HEIGHT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the image height used for reading pixel data from memory. The initial is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_LSB_FIRST</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_ROW_LENGTH</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the row length used for reading pixel data from memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_SKIP_IMAGES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of pixel images skipped before the first pixel is read from memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_SKIP_PIXELS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of pixel locations skipped before the first pixel is read from memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_SKIP_ROWS</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of rows of pixel locations skipped before the first pixel is read from memory. The initial value is 0. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_UNPACK_SWAP_BYTES</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the bytes of two-byte and four-byte pixel indices and components are swapped after being read from memory. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glPixelStore"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_ARRAY</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether the vertex array is enabled. The initial value is <code class="constant">GL_FALSE</code>. See <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_ARRAY_BUFFER_BINDING</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single value, the name of the buffer object associated with the vertex array. This buffer object would have been bound to the target <code class="constant">GL_ARRAY_BUFFER</code> at the time of the most recent call to <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a>. If no buffer object was bound to this target, 0 is returned. The initial value is 0. See <a class="citerefentry" href="glBindBuffer"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_ARRAY_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the number of coordinates per vertex in the vertex array. The initial value is 4. See <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_ARRAY_STRIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the byte offset between consecutive vertices in the vertex array. The initial value is 0. See <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_ARRAY_TYPE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the data type of each coordinate in the vertex array. The initial value is <code class="constant">GL_FLOAT</code>. See <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_PROGRAM_POINT_SIZE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether vertex program point size mode is enabled. If enabled, and a vertex shader is active, then the point size is taken from the shader built-in <code class="code">gl_PointSize</code>. If disabled, and a vertex shader is active, then the point size is taken from the point state as specified by <a class="citerefentry" href="glPointSize"><span class="citerefentry"><span class="refentrytitle">glPointSize</span></span></a>. The initial value is <code class="constant">GL_FALSE</code>. </p></dd><dt><span class="term"><code class="constant">GL_VERTEX_PROGRAM_TWO_SIDE</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns a single boolean value indicating whether vertex program two-sided color mode is enabled. If enabled, and a vertex shader is active, then the GL chooses the back color output for back-facing polygons, and the front color output for non-polygons and front-facing polygons. If disabled, and a vertex shader is active, then the front color output is always selected. The initial value is <code class="constant">GL_FALSE</code>. </p></dd><dt><span class="term"><code class="constant">GL_VIEWPORT</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns four values: the <math overflow="scroll"><mi mathvariant="italic">x</mi></math> and <math overflow="scroll"><mi mathvariant="italic">y</mi></math> window coordinates of the viewport, followed by its width and height. Initially the <math overflow="scroll"><mi mathvariant="italic">x</mi></math> and <math overflow="scroll"><mi mathvariant="italic">y</mi></math> window coordinates are both set to 0, and the width and height are set to the width and height of the window into which the GL will do its rendering. See <a class="citerefentry" href="glViewport"><span class="citerefentry"><span class="refentrytitle">glViewport</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ZOOM_X</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the <math overflow="scroll"><mi mathvariant="italic">x</mi></math> pixel zoom factor. The initial value is 1. See <a class="citerefentry" href="glPixelZoom"><span class="citerefentry"><span class="refentrytitle">glPixelZoom</span></span></a>. </p></dd><dt><span class="term"><code class="constant">GL_ZOOM_Y</code></span></dt><dd><p> </p><p> <em class="parameter"><code>params</code></em> returns one value, the <math overflow="scroll"><mi mathvariant="italic">y</mi></math> pixel zoom factor. The initial value is 1. See <a class="citerefentry" href="glPixelZoom"><span class="citerefentry"><span class="refentrytitle">glPixelZoom</span></span></a>. </p></dd></dl></div><p> Many of the boolean parameters can also be queried more easily using <a class="citerefentry" href="glIsEnabled"><span class="citerefentry"><span class="refentrytitle">glIsEnabled</span></span></a>. </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="notes"></a><h2>Notes</h2><p> <code class="constant">GL_COLOR_LOGIC_OP</code>, <code class="constant">GL_COLOR_ARRAY</code>, <code class="constant">GL_COLOR_ARRAY_SIZE</code>, <code class="constant">GL_COLOR_ARRAY_STRIDE</code>, <code class="constant">GL_COLOR_ARRAY_TYPE</code>, <code class="constant">GL_EDGE_FLAG_ARRAY</code>, <code class="constant">GL_EDGE_FLAG_ARRAY_STRIDE</code>, <code class="constant">GL_INDEX_ARRAY</code>, <code class="constant">GL_INDEX_ARRAY_STRIDE</code>, <code class="constant">GL_INDEX_ARRAY_TYPE</code>, <code class="constant">GL_INDEX_LOGIC_OP</code>, <code class="constant">GL_NORMAL_ARRAY</code>, <code class="constant">GL_NORMAL_ARRAY_STRIDE</code>, <code class="constant">GL_NORMAL_ARRAY_TYPE</code>, <code class="constant">GL_POLYGON_OFFSET_UNITS</code>, <code class="constant">GL_POLYGON_OFFSET_FACTOR</code>, <code class="constant">GL_POLYGON_OFFSET_FILL</code>, <code class="constant">GL_POLYGON_OFFSET_LINE</code>, <code class="constant">GL_POLYGON_OFFSET_POINT</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_SIZE</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_STRIDE</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_TYPE</code>, <code class="constant">GL_VERTEX_ARRAY</code>, <code class="constant">GL_VERTEX_ARRAY_SIZE</code>, <code class="constant">GL_VERTEX_ARRAY_STRIDE</code>, and <code class="constant">GL_VERTEX_ARRAY_TYPE</code> are available only if the GL version is 1.1 or greater. </p><p> <code class="constant">GL_ALIASED_POINT_SIZE_RANGE</code>, <code class="constant">GL_FEEDBACK_BUFFER_SIZE</code>, <code class="constant">GL_FEEDBACK_BUFFER_TYPE</code>, <code class="constant">GL_LIGHT_MODEL_AMBIENT</code>, <code class="constant">GL_LIGHT_MODEL_COLOR_CONTROL</code>, <code class="constant">GL_MAX_3D_TEXTURE_SIZE</code>, <code class="constant">GL_MAX_ELEMENTS_INDICES</code>, <code class="constant">GL_MAX_ELEMENTS_VERTICES</code>, <code class="constant">GL_PACK_IMAGE_HEIGHT</code>, <code class="constant">GL_PACK_SKIP_IMAGES</code>, <code class="constant">GL_RESCALE_NORMAL</code>, <code class="constant">GL_SELECTION_BUFFER_SIZE</code>, <code class="constant">GL_SMOOTH_LINE_WIDTH_GRANULARITY</code>, <code class="constant">GL_SMOOTH_LINE_WIDTH_RANGE</code>, <code class="constant">GL_SMOOTH_POINT_SIZE_GRANULARITY</code>, <code class="constant">GL_SMOOTH_POINT_SIZE_RANGE</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_BINDING_3D</code>, <code class="constant">GL_UNPACK_IMAGE_HEIGHT</code>, and <code class="constant">GL_UNPACK_SKIP_IMAGES</code> are available only if the GL version is 1.2 or greater. </p><p> <code class="constant">GL_COMPRESSED_TEXTURE_FORMATS</code>, <code class="constant">GL_NUM_COMPRESSED_TEXTURE_FORMATS</code>, <code class="constant">GL_TEXTURE_BINDING_CUBE_MAP</code>, and <code class="constant">GL_TEXTURE_COMPRESSION_HINT</code> are available only if the GL version is 1.3 or greater. </p><p> <code class="constant">GL_BLEND_DST_ALPHA</code>, <code class="constant">GL_BLEND_DST_RGB</code>, <code class="constant">GL_BLEND_SRC_ALPHA</code>, <code class="constant">GL_BLEND_SRC_RGB</code>, <code class="constant">GL_CURRENT_FOG_COORD</code>, <code class="constant">GL_CURRENT_SECONDARY_COLOR</code>, <code class="constant">GL_FOG_COORD_ARRAY_STRIDE</code>, <code class="constant">GL_FOG_COORD_ARRAY_TYPE</code>, <code class="constant">GL_FOG_COORD_SRC</code>, <code class="constant">GL_MAX_TEXTURE_LOD_BIAS</code>, <code class="constant">GL_POINT_SIZE_MIN</code>, <code class="constant">GL_POINT_SIZE_MAX</code>, <code class="constant">GL_POINT_FADE_THRESHOLD_SIZE</code>, <code class="constant">GL_POINT_DISTANCE_ATTENUATION</code>, <code class="constant">GL_SECONDARY_COLOR_ARRAY_SIZE</code>, <code class="constant">GL_SECONDARY_COLOR_ARRAY_STRIDE</code>, and <code class="constant">GL_SECONDARY_COLOR_ARRAY_TYPE</code> are available only if the GL version is 1.4 or greater. </p><p> <code class="constant">GL_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_COLOR_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_EDGE_FLAG_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_ELEMENT_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_FOG_COORD_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_INDEX_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_NORMAL_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</code>, and <code class="constant">GL_VERTEX_ARRAY_BUFFER_BINDING</code> are available only if the GL version is 1.5 or greater. </p><p> <code class="constant">GL_BLEND_EQUATION_ALPHA</code>, <code class="constant">GL_BLEND_EQUATION_RGB</code>, <code class="constant">GL_DRAW_BUFFER</code><span class="emphasis"><em>i</em></span>, <code class="constant">GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code>, <code class="constant">GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</code>, <code class="constant">GL_MAX_DRAW_BUFFERS</code>, <code class="constant">GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</code>, <code class="constant">GL_MAX_TEXTURE_COORDS</code>, <code class="constant">GL_MAX_TEXTURE_IMAGE_UNITS</code>, <code class="constant">GL_MAX_VARYING_FLOATS</code>, <code class="constant">GL_MAX_VERTEX_ATTRIBS</code>, <code class="constant">GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</code>, <code class="constant">GL_MAX_VERTEX_UNIFORM_COMPONENTS</code>, <code class="constant">GL_POINT_SPRITE</code>, <code class="constant">GL_STENCIL_BACK_FAIL</code>, <code class="constant">GL_STENCIL_BACK_FUNC</code>, <code class="constant">GL_STENCIL_BACK_PASS_DEPTH_FAIL</code>, <code class="constant">GL_STENCIL_BACK_PASS_DEPTH_PASS</code>, <code class="constant">GL_STENCIL_BACK_REF</code>, <code class="constant">GL_STENCIL_BACK_VALUE_MASK</code>, <code class="constant">GL_STENCIL_BACK_WRITEMASK</code>, <code class="constant">GL_VERTEX_PROGRAM_POINT_SIZE</code>, and <code class="constant">GL_VERTEX_PROGRAM_TWO_SIDE</code> are available only if the GL version is 2.0 or greater. </p><p> <code class="constant">GL_CURRENT_RASTER_SECONDARY_COLOR</code>, <code class="constant">GL_PIXEL_PACK_BUFFER_BINDING</code> and <code class="constant">GL_PIXEL_UNPACK_BUFFER_BINDING</code> are available only if the GL version is 2.1 or greater. </p><p> <code class="constant">GL_LINE_WIDTH_GRANULARITY</code> was deprecated in GL version 1.2. Its functionality was replaced by <code class="constant">GL_SMOOTH_LINE_WIDTH_GRANULARITY</code>. </p><p> <code class="constant">GL_LINE_WIDTH_RANGE</code> was deprecated in GL version 1.2. Its functionality was replaced by <code class="constant">GL_SMOOTH_LINE_WIDTH_RANGE</code>. </p><p> <code class="constant">GL_POINT_SIZE_GRANULARITY</code> was deprecated in GL version 1.2. Its functionality was replaced by <code class="constant">GL_SMOOTH_POINT_SIZE_GRANULARITY</code>. </p><p> <code class="constant">GL_POINT_SIZE_RANGE</code> was deprecated in GL version 1.2. Its functionality was replaced by <code class="constant">GL_SMOOTH_POINT_SIZE_RANGE</code>. </p><p> <code class="constant">GL_BLEND_EQUATION</code> was deprecated in GL version 2.0. Its functionality was replaced by <code class="constant">GL_BLEND_EQUATION_RGB</code> and <code class="constant">GL_BLEND_EQUATION_ALPHA</code>. </p><p> <code class="constant">GL_COLOR_MATRIX</code>, <code class="constant">GL_COLOR_MATRIX_STACK_DEPTH</code>, <code class="constant">GL_COLOR_TABLE</code>, <code class="constant">GL_CONVOLUTION_1D</code>, <code class="constant">GL_CONVOLUTION_2D</code>, <code class="constant">GL_HISTOGRAM</code>, <code class="constant">GL_MAX_COLOR_MATRIX_STACK_DEPTH</code>, <code class="constant">GL_MINMAX</code>, <code class="constant">GL_POST_COLOR_MATRIX_COLOR_TABLE</code>, <code class="constant">GL_POST_COLOR_MATRIX_RED_BIAS</code>, <code class="constant">GL_POST_COLOR_MATRIX_GREEN_BIAS</code>, <code class="constant">GL_POST_COLOR_MATRIX_BLUE_BIAS</code>, <code class="constant">GL_POST_COLOR_MATRIX_ALPHA_BIAS</code>, <code class="constant">GL_POST_COLOR_MATRIX_RED_SCALE</code>, <code class="constant">GL_POST_COLOR_MATRIX_GREEN_SCALE</code>, <code class="constant">GL_POST_COLOR_MATRIX_BLUE_SCALE</code>, <code class="constant">GL_POST_COLOR_MATRIX_ALPHA_SCALE</code>, <code class="constant">GL_POST_CONVOLUTION_COLOR_TABLE</code>, <code class="constant">GL_POST_CONVOLUTION_RED_BIAS</code>, <code class="constant">GL_POST_CONVOLUTION_GREEN_BIAS</code>, <code class="constant">GL_POST_CONVOLUTION_BLUE_BIAS</code>, <code class="constant">GL_POST_CONVOLUTION_ALPHA_BIAS</code>, <code class="constant">GL_POST_CONVOLUTION_RED_SCALE</code>, <code class="constant">GL_POST_CONVOLUTION_GREEN_SCALE</code>, <code class="constant">GL_POST_CONVOLUTION_BLUE_SCALE</code>, <code class="constant">GL_POST_CONVOLUTION_ALPHA_SCALE</code>, and <code class="constant">GL_SEPARABLE_2D</code> are available only if <code class="code">ARB_imaging</code> is returned from <code class="function">glGet</code> when called with the argument <code class="constant">GL_EXTENSIONS</code>. </p><p> When the <code class="code">ARB_multitexture</code> extension is supported, or the GL version is 1.3 or greater, the following parameters return the associated value for the active texture unit: <code class="constant">GL_CURRENT_RASTER_TEXTURE_COORDS</code>, <code class="constant">GL_TEXTURE_1D</code>, <code class="constant">GL_TEXTURE_BINDING_1D</code>, <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_BINDING_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_BINDING_3D</code>, <code class="constant">GL_TEXTURE_GEN_S</code>, <code class="constant">GL_TEXTURE_GEN_T</code>, <code class="constant">GL_TEXTURE_GEN_R</code>, <code class="constant">GL_TEXTURE_GEN_Q</code>, <code class="constant">GL_TEXTURE_MATRIX</code>, and <code class="constant">GL_TEXTURE_STACK_DEPTH</code>. Likewise, the following parameters return the associated value for the active client texture unit: <code class="constant">GL_TEXTURE_COORD_ARRAY</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_SIZE</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_STRIDE</code>, <code class="constant">GL_TEXTURE_COORD_ARRAY_TYPE</code>. </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="errors"></a><h2>Errors</h2><p> <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value. </p><p> <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glGet</code> is executed between the execution of <a class="citerefentry" href="glBegin"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a> and the corresponding execution of <a class="citerefentry" href="glEnd"><span class="citerefentry"><span class="refentrytitle">glEnd</span></span></a>. </p><p> </p></div> <div class="refsect1" id="tutorials"><h2>Tutorials</h2><p><a href="http://www.songho.ca/opengl/gl_displaylist.html">Songho - OpenGL Display List</a><br><a href="http://www.songho.ca/opengl/gl_pipeline.html">Songho - OpenGL Rendering Pipeline</a><br></p></div> <div class="refsect1" lang="en" xml:lang="en"><a id="seealso"></a><h2>See Also</h2><p> <a class="citerefentry" href="glGetActiveAttrib"><span class="citerefentry"><span class="refentrytitle">glGetActiveAttrib</span></span></a>, <a class="citerefentry" href="glGetActiveUniform"><span class="citerefentry"><span class="refentrytitle">glGetActiveUniform</span></span></a>, <a class="citerefentry" href="glGetAttachedShaders"><span class="citerefentry"><span class="refentrytitle">glGetAttachedShaders</span></span></a>, <a class="citerefentry" href="glGetAttribLocation"><span class="citerefentry"><span class="refentrytitle">glGetAttribLocation</span></span></a>, <a class="citerefentry" href="glGetBufferParameteriv"><span class="citerefentry"><span class="refentrytitle">glGetBufferParameteriv</span></span></a>, <a class="citerefentry" href="glGetBufferPointerv"><span class="citerefentry"><span class="refentrytitle">glGetBufferPointerv</span></span></a>, <a class="citerefentry" href="glGetBufferSubData"><span class="citerefentry"><span class="refentrytitle">glGetBufferSubData</span></span></a>, <a class="citerefentry" href="glGetClipPlane"><span class="citerefentry"><span class="refentrytitle">glGetClipPlane</span></span></a>, <a class="citerefentry" href="glGetColorTable"><span class="citerefentry"><span class="refentrytitle">glGetColorTable</span></span></a>, <a class="citerefentry" href="glGetColorTableParameter"><span class="citerefentry"><span class="refentrytitle">glGetColorTableParameter</span></span></a>, <a class="citerefentry" href="glGetCompressedTexImage"><span class="citerefentry"><span class="refentrytitle">glGetCompressedTexImage</span></span></a>, <a class="citerefentry" href="glGetConvolutionFilter"><span class="citerefentry"><span class="refentrytitle">glGetConvolutionFilter</span></span></a>, <a class="citerefentry" href="glGetConvolutionParameter"><span class="citerefentry"><span class="refentrytitle">glGetConvolutionParameter</span></span></a>, <a class="citerefentry" href="glGetError"><span class="citerefentry"><span class="refentrytitle">glGetError</span></span></a>, <a class="citerefentry" href="glGetHistogram"><span class="citerefentry"><span class="refentrytitle">glGetHistogram</span></span></a>, <a class="citerefentry" href="glGetHistogramParameter"><span class="citerefentry"><span class="refentrytitle">glGetHistogramParameter</span></span></a>, <a class="citerefentry" href="glGetLight"><span class="citerefentry"><span class="refentrytitle">glGetLight</span></span></a>, <a class="citerefentry" href="glGetMap"><span class="citerefentry"><span class="refentrytitle">glGetMap</span></span></a>, <a class="citerefentry" href="glGetMaterial"><span class="citerefentry"><span class="refentrytitle">glGetMaterial</span></span></a>, <a class="citerefentry" href="glGetMinmax"><span class="citerefentry"><span class="refentrytitle">glGetMinmax</span></span></a>, <a class="citerefentry" href="glGetMinmaxParameter"><span class="citerefentry"><span class="refentrytitle">glGetMinmaxParameter</span></span></a>, <a class="citerefentry" href="glGetPixelMap"><span class="citerefentry"><span class="refentrytitle">glGetPixelMap</span></span></a>, <a class="citerefentry" href="glGetPointerv"><span class="citerefentry"><span class="refentrytitle">glGetPointerv</span></span></a>, <a class="citerefentry" href="glGetPolygonStipple"><span class="citerefentry"><span class="refentrytitle">glGetPolygonStipple</span></span></a>, <a class="citerefentry" href="glGetProgram"><span class="citerefentry"><span class="refentrytitle">glGetProgram</span></span></a>, <a class="citerefentry" href="glGetProgramInfoLog"><span class="citerefentry"><span class="refentrytitle">glGetProgramInfoLog</span></span></a>, <a class="citerefentry" href="glGetQueryiv"><span class="citerefentry"><span class="refentrytitle">glGetQueryiv</span></span></a>, <a class="citerefentry" href="glGetQueryObject"><span class="citerefentry"><span class="refentrytitle">glGetQueryObject</span></span></a>, <a class="citerefentry" href="glGetSeparableFilter"><span class="citerefentry"><span class="refentrytitle">glGetSeparableFilter</span></span></a>, <a class="citerefentry" href="glGetShader"><span class="citerefentry"><span class="refentrytitle">glGetShader</span></span></a>, <a class="citerefentry" href="glGetShaderInfoLog"><span class="citerefentry"><span class="refentrytitle">glGetShaderInfoLog</span></span></a>, <a class="citerefentry" href="glGetShaderSource"><span class="citerefentry"><span class="refentrytitle">glGetShaderSource</span></span></a>, <a class="citerefentry" href="glGetString"><span class="citerefentry"><span class="refentrytitle">glGetString</span></span></a>, <a class="citerefentry" href="glGetTexEnv"><span class="citerefentry"><span class="refentrytitle">glGetTexEnv</span></span></a>, <a class="citerefentry" href="glGetTexGen"><span class="citerefentry"><span class="refentrytitle">glGetTexGen</span></span></a>, <a class="citerefentry" href="glGetTexImage"><span class="citerefentry"><span class="refentrytitle">glGetTexImage</span></span></a>, <a class="citerefentry" href="glGetTexLevelParameter"><span class="citerefentry"><span class="refentrytitle">glGetTexLevelParameter</span></span></a>, <a class="citerefentry" href="glGetTexParameter"><span class="citerefentry"><span class="refentrytitle">glGetTexParameter</span></span></a>, <a class="citerefentry" href="glGetUniform"><span class="citerefentry"><span class="refentrytitle">glGetUniform</span></span></a>, <a class="citerefentry" href="glGetUniformLocation"><span class="citerefentry"><span class="refentrytitle">glGetUniformLocation</span></span></a>, <a class="citerefentry" href="glGetVertexAttrib"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>, <a class="citerefentry" href="glGetVertexAttribPointerv"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttribPointerv</span></span></a>, <a class="citerefentry" href="glIsEnabled"><span class="citerefentry"><span class="refentrytitle">glIsEnabled</span></span></a> </p></div><div class="refsect1" lang="en" xml:lang="en"><div id="Copyright"><h2>Copyright</h2><p> Copyright &#169; 1991-2006 Silicon Graphics, Inc. This document is licensed under the SGI Free Software B License. For details, see <a class="ulink" href="http://oss.sgi.com/projects/FreeB/" target="_top">http://oss.sgi.com/projects/FreeB/</a>. </p></div></div></div> </div> <div id="improvepage">Think you can improve this page? <a href="https://github.com/BSVino/docs.gl/blob/master/gl2/glGet.xhtml">Edit this page</a> on <a href="https://github.com/BSVino/docs.gl/">GitHub</a>.</div> </div> <div id="footer"> <div id="credits"><a href="http://docs.gl/">docs.gl</a> was written by <a href="http://twitter.com/VinoBS">Jorge Rodr&iacute;guez</a>. Each entry is under individual copyright displayed at the bottom of that entry. All other content is in the public domain.<br> docs.gl is completely unaffiliated with OpenGL and Khronos.<br> These pages were last compiled on 09 February 2017 at 02:12:28 GMT.</div> </div> <script async src="../docs.gl.search.js"></script> </body> </html> 